The following is a digest of the repository "client".
This digest is designed to be easily parsed by Large Language Models.

--- SUMMARY ---
Repository: client
Files Analyzed: 96
Total Text Size: 197 KB
Estimated Tokens (text only): ~49,651

--- DIRECTORY STRUCTURE ---
client/
├── app/
│   ├── (auth)/
│   │   ├── forgot-password/
│   │   │   ├── _components/
│   │   │   │   ├── validation/
│   │   │   │   │   └── schema.js
│   │   │   │   └── ForgotPasswordForm.jsx
│   │   │   ├── layout.js
│   │   │   └── page.js
│   │   ├── reset-password/
│   │   │   ├── _components/
│   │   │   │   ├── validation/
│   │   │   │   │   └── schema.js
│   │   │   │   └── ResetPasswordForm.jsx
│   │   │   ├── layout.js
│   │   │   └── page.js
│   │   ├── signin/
│   │   │   ├── _components/
│   │   │   │   ├── validation/
│   │   │   │   │   └── schema.js
│   │   │   │   ├── SignInForm.jsx
│   │   │   │   └── SignInWrapper.jsx
│   │   │   ├── layout.js
│   │   │   └── page.js
│   │   └── signup/
│   │       ├── _components/
│   │       │   ├── validation/
│   │       │   │   └── schema.js
│   │       │   ├── SignUpForm.jsx
│   │       │   └── SignUpWrapper.jsx
│   │       ├── layout.js
│   │       └── page.js
│   ├── (dashboard)/
│   │   ├── admin/
│   │   │   ├── courses/
│   │   │   │   ├── _components/
│   │   │   │   │   ├── CourseDetails.jsx
│   │   │   │   │   ├── CourseForm.jsx
│   │   │   │   │   └── CoursesTable.jsx
│   │   │   │   ├── [id]/
│   │   │   │   │   ├── edit/
│   │   │   │   │   │   └── page.js
│   │   │   │   │   └── page.js
│   │   │   │   ├── create/
│   │   │   │   │   └── page.js
│   │   │   │   └── page.js
│   │   │   ├── messages/
│   │   │   │   ├── _components/
│   │   │   │   │   ├── MessageDetails.jsx
│   │   │   │   │   ├── MessageForm.jsx
│   │   │   │   │   └── MessagesTable.jsx
│   │   │   │   ├── [id]/
│   │   │   │   │   └── page.js
│   │   │   │   ├── create/
│   │   │   │   │   └── page.js
│   │   │   │   └── page.js
│   │   │   ├── projects/
│   │   │   │   ├── _components/
│   │   │   │   │   ├── ProjectDetails.jsx
│   │   │   │   │   ├── ProjectForm.jsx
│   │   │   │   │   └── ProjectsTable.jsx
│   │   │   │   ├── [id]/
│   │   │   │   │   ├── edit/
│   │   │   │   │   │   └── page.js
│   │   │   │   │   └── page.js
│   │   │   │   ├── create/
│   │   │   │   │   └── page.js
│   │   │   │   └── page.js
│   │   │   ├── universities/
│   │   │   │   ├── _components/
│   │   │   │   │   ├── UniversitiesTable.jsx
│   │   │   │   │   ├── UniversitiesWrapper.jsx
│   │   │   │   │   ├── UniversityDetails.jsx
│   │   │   │   │   └── UniversityForm.jsx
│   │   │   │   ├── [id]/
│   │   │   │   │   ├── edit/
│   │   │   │   │   │   └── page.js
│   │   │   │   │   └── page.js
│   │   │   │   ├── create/
│   │   │   │   │   └── page.js
│   │   │   │   ├── layout.js
│   │   │   │   └── page.js
│   │   │   └── users/
│   │   │       ├── _components/
│   │   │       │   ├── UserForm.jsx
│   │   │       │   ├── UsersTable.jsx
│   │   │       │   └── UsersWrapper.jsx
│   │   │       ├── create/
│   │   │       │   └── page.js
│   │   │       ├── layout.js
│   │   │       └── page.js
│   │   ├── dashboard/
│   │   │   ├── _components/
│   │   │   │   ├── AdminControls.jsx
│   │   │   │   ├── CourseTab.jsx
│   │   │   │   ├── DashboardClient.jsx
│   │   │   │   ├── DashboardHeader.jsx
│   │   │   │   ├── DashboardTabs.jsx
│   │   │   │   ├── ProjectTab.jsx
│   │   │   │   └── UniversityTab.jsx
│   │   │   └── page.js
│   │   └── profile/
│   │       ├── _components/
│   │       │   ├── validation/
│   │       │   │   └── schema.js
│   │       │   └── ProfileClient.jsx
│   │       └── page.js
│   ├── favicon.ico [binary]
│   ├── globals.css
│   ├── layout.js
│   ├── page.js
│   └── providers.js
├── components/
│   └── ui/
│       ├── badge.jsx
│       ├── button.jsx
│       ├── card.jsx
│       ├── dialog.jsx
│       ├── empty.jsx
│       ├── field.jsx
│       ├── input.jsx
│       ├── label.jsx
│       ├── select.jsx
│       ├── separator.jsx
│       ├── skeleton.jsx
│       ├── spinner.jsx
│       ├── table.jsx
│       └── tabs.jsx
├── requests/
│   ├── auth.js
│   ├── courses.js
│   ├── messages.js
│   ├── projects.js
│   ├── universities.js
│   └── users.js
├── utils/
│   └── formatDate.js
├── checking.txt
├── components.json
├── jsconfig.json
├── next.config.mjs
├── package.json
└── postcss.config.mjs


--- FILE CONTENTS ---
============================================================
FILE: app/(auth)/forgot-password/_components/validation/schema.js
============================================================
import * as Yup from "yup";

export const schema = Yup.object({
  email: Yup.string()
    .email("Invalid email address")
    .required("Email is required"),
});


============================================================
FILE: app/(auth)/forgot-password/_components/ForgotPasswordForm.jsx
============================================================
"use client";

import { useFormik } from "formik";
import { useMutation } from "@tanstack/react-query";
import { forgotPassword } from "@/requests/auth";
import { schema } from "./validation/schema";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import {
  Field,
  FieldLabel,
  FieldError,
  FieldSet,
  FieldGroup,
} from "@/components/ui/field";
import { Input } from "@/components/ui/input";
import { toast } from "sonner";

export default function ForgotPasswordForm() {
  const router = useRouter();

  const { mutateAsync, isPending } = useMutation({
    mutationFn: (email) => forgotPassword(email),
    onSuccess: () => {
      toast.success("Password reset link sent! Check your email.");
      router.push("/signin");
    },
    onError: (err) => {
      toast.error(err.message || "Failed to send reset link");
    },
  });

  const { handleSubmit, getFieldProps, errors, touched, isValid } = useFormik({
    initialValues: { email: "" },
    validationSchema: schema,
    onSubmit: (values) => {
      mutateAsync(values.email);
    },
  });

  return (
    <form onSubmit={handleSubmit} autoComplete="off" className="space-y-4">
      <Field data-invalid={!!(touched.password && errors.password)}>
        <FieldLabel htmlFor="email">Email</FieldLabel>
        <Input
          id="email"
          type="email"
          placeholder="your.email@example.com"
          disabled={isPending}
          aria-invalid={!!(touched.email && errors.email)}
          {...getFieldProps("email")}
          className={errors.email && touched.email ? "border-red-500" : ""}
        />
        <FieldError>{errors.email} </FieldError>
      </Field>
      <Button
        type="submit"
        disabled={isPending || !isValid}
        className="w-full mt-4"
      >
        {isPending ? "Sending..." : "Send Reset Link"}
      </Button>
    </form>
  );
}


============================================================
FILE: app/(auth)/forgot-password/layout.js
============================================================
import Link from "next/link";

export default function ForgotPasswordLayout({ children }) {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="max-w-md w-full space-y-4 p-8 bg-white rounded-lg shadow">
        <div className="flex justify-between items-center">
          <Link href="/signin" className="text-gray-600 hover:underline block">
            Sign in
          </Link>
          <Link href="/" className="text-gray-600 hover:underline block">
            Home
          </Link>
        </div>
        <div>
          <h2 className="text-3xl font-bold">Forgot Password</h2>
          <p className="mt-2 text-sm text-gray-600">
            Enter your email address and we'll send you a password reset link.
          </p>
        </div>
        {children}
      </div>
    </div>
  );
}


============================================================
FILE: app/(auth)/forgot-password/page.js
============================================================
import ForgotPasswordForm from "./_components/ForgotPasswordForm";

export default function ForgotPasswordPage() {
  return <ForgotPasswordForm />;
}


============================================================
FILE: app/(auth)/reset-password/_components/validation/schema.js
============================================================
import * as Yup from "yup";

export const schema = Yup.object({
  password: Yup.string()
    .min(8, "Must be at least 8 characters")
    .required("Password is required"),
  confirmPassword: Yup.string()
    .oneOf([Yup.ref("password")], "Passwords must match")
    .required("confirm password is required"),
});


============================================================
FILE: app/(auth)/reset-password/_components/ResetPasswordForm.jsx
============================================================
"use client";

import { useRouter, useSearchParams } from "next/navigation";
import { useMutation } from "@tanstack/react-query";
import { useFormik } from "formik";
import { resetPassword } from "@/requests/auth";
import Link from "next/link";
import { schema } from "./validation/schema";
import { Button } from "@/components/ui/button";
import { Field, FieldLabel, FieldError } from "@/components/ui/field";
import { Input } from "@/components/ui/input";
import { toast } from "sonner";

export default function ResetPasswordForm() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const token = searchParams.get("token");
  console.log(token);
  const { mutateAsync, isPending } = useMutation({
    mutationFn: ({ password, token }) => resetPassword(password, token),
    onSuccess: () => {
      toast.success("Password reset successfully! Please sign in.");
      router.push("/signin");
    },
    onError: (err) => {
      toast.error(err.message || "Failed to reset password");
    },
  });
  const { handleSubmit, getFieldProps, errors, touched, isValid } = useFormik({
    initialValues: { password: "", confirmPassword: "" },
    validationSchema: schema,
    onSubmit: (values) => {
      if (!token) return;
      mutateAsync({ password: values.password, token });
    },
  });
  if (!token) {
    return (
      <div className="text-center text-sm space-y-2">
        <div className="bg-red-50 text-red-600 p-3 rounded mb-4">
          Invalid or expired reset link. Please request a new one.
        </div>
        <Button>
          <Link href="/forgot-password">Request new reset link</Link>
        </Button>
      </div>
    );
  }
  return (
    <form onSubmit={handleSubmit} autoComplete="off" className="space-y-4">
      <Field data-invalid={!!(touched.password && errors.password)}>
        <FieldLabel htmlFor="password">New Password</FieldLabel>
        <Input
          id="password"
          type="password"
          placeholder="new password"
          disabled={isPending}
          aria-invalid={!!(touched.password && errors.password)}
          {...getFieldProps("password")}
          className={
            errors.password && touched.password ? "border-red-500" : ""
          }
        />
        <FieldError>{errors.password}</FieldError>
      </Field>
      <Field
        data-invalid={!!(touched.confirmPassword && errors.confirmPassword)}
      >
        <FieldLabel htmlFor="confirmPassword">Confirm Password</FieldLabel>
        <Input
          id="confirmPassword"
          type="password"
          placeholder="confirm new password"
          disabled={isPending}
          aria-invalid={!!(touched.confirmPassword && errors.confirmPassword)}
          {...getFieldProps("confirmPassword")}
          className={
            errors.confirmPassword && touched.confirmPassword
              ? "border-red-500"
              : ""
          }
        />
        <FieldError>{errors.confirmPassword}</FieldError>
      </Field>
      <Button
        type="submit"
        disabled={isPending || !isValid}
        className="w-full mt-4"
      >
        {isPending ? "Resetting..." : "Reset Password"}
      </Button>
    </form>
  );
}


============================================================
FILE: app/(auth)/reset-password/layout.js
============================================================
import Link from "next/link";

export default function ResetPasswordLayout({ children }) {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="max-w-md w-full space-y-4 p-8 bg-white rounded-lg shadow">
        <div className="flex justify-between items-center">
          <Link href="/signin" className="text-gray-600 hover:underline block">
            Sign in
          </Link>
          <Link href="/" className="text-gray-600 hover:underline block">
            Home
          </Link>
        </div>
        <div>
          <h2 className="text-3xl font-bold">Reset Password</h2>
          <p className="mt-2 text-sm text-gray-600">
            Enter your new password below.
          </p>
        </div>
        {children}
      </div>
    </div>
  );
}
// http://localhost:5005/api/auth/reset-password/3BqgxHlEg1EAc3pXb5PYolYO?callbackURL=


============================================================
FILE: app/(auth)/reset-password/page.js
============================================================
import ResetPasswordForm from "./_components/ResetPasswordForm";

export default function ResetPasswordPage() {
  return <ResetPasswordForm />;
}


============================================================
FILE: app/(auth)/signin/_components/validation/schema.js
============================================================
import * as Yup from "yup";

export const schema = Yup.object({
  email: Yup.string()
    .email("Invalid email address")
    .required("Email is required"),
  password: Yup.string().required("Password is required"),
});


============================================================
FILE: app/(auth)/signin/_components/SignInForm.jsx
============================================================
"use client";

import { Field, FieldLabel, FieldError } from "@/components/ui/field";
import { useMutation } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { schema } from "./validation/schema";
import { signin } from "@/requests/auth";
import { useFormik } from "formik";
import { toast } from "sonner";
import Link from "next/link";

export default function SignInForm() {
  const { mutateAsync, isPending } = useMutation({
    mutationFn: (values) => signin(values),
    onSuccess: () => {
      toast.success("You gain access to dashboard!");
    },
    onError: (err) => {
      toast.error(err.message || "Failed to sign in");
    },
  });

  const { handleSubmit, getFieldProps, errors, touched, isValid } = useFormik({
    initialValues: { email: "", password: "" },
    validationSchema: schema,
    onSubmit: (values) => mutateAsync(values),
  });

  return (
    <form onSubmit={handleSubmit} autoComplete="off" className="space-y-6">
      <Field data-invalid={!!(touched.email && errors.email)}>
        <FieldLabel htmlFor="email">Email</FieldLabel>
        <Input
          id="email"
          type="email"
          placeholder="email address"
          disabled={isPending}
          aria-invalid={!!(touched.email && errors.email)}
          {...getFieldProps("email")}
        />
        <FieldError>{errors.email}</FieldError>
      </Field>
      <Field data-invalid={!!(touched.password && errors.password)}>
        <div className="flex justify-between items-center">
          <FieldLabel htmlFor="password">Password</FieldLabel>
          <Link
            href="/forgot-password"
            className="text-sm text-blue-600 hover:underline"
          >
            Forgot password?
          </Link>
        </div>
        <Input
          id="password"
          type="password"
          placeholder="password"
          disabled={isPending}
          aria-invalid={!!(touched.password && errors.password)}
          {...getFieldProps("password")}
        />
        <FieldError>{errors.password}</FieldError>
      </Field>
      <Button type="submit" disabled={isPending || !isValid} className="w-full">
        {isPending ? "Signing in..." : "Sign In"}
      </Button>
    </form>
  );
}


============================================================
FILE: app/(auth)/signin/_components/SignInWrapper.jsx
============================================================
"use client";

import { Spinner } from "@/components/ui/spinner";
import { authClient } from "@/lib/auth-client";
import { useRouter } from "next/navigation";
import { useEffect } from "react";
import Link from "next/link";

export default function SignInWrapper({ children }) {
  const router = useRouter();
  const { data: session, isPending } = authClient.useSession();
  useEffect(() => {
    if (!isPending && session) {
      router.push("/dashboard");
    }
  }, [session, isPending, router]);
  if (isPending) {
    return <Spinner />;
  }
  if (session) return null;
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="max-w-md w-full space-y-4 p-8 bg-white rounded-lg shadow">
        <p className="pt-4">
          <Link href="/" className="text-gray-600 hover:underline">
            Back to home
          </Link>
        </p>
        <div>
          <h2 className="text-4xl font-bold">Sign In</h2>
          <p className="mt-2 text-sm text-gray-600">
            Welcome back! Please sign in to your account.
          </p>
        </div>
        {children}
        <p className="text-sm">
          Don't have an account?{" "}
          <Link href="/signup" className="text-blue-600 hover:underline">
            Register
          </Link>
        </p>
      </div>
    </div>
  );
}


============================================================
FILE: app/(auth)/signin/layout.js
============================================================
import SignInWrapper from "./_components/SignInWrapper";

export const metadata = {
  title: "Better Auth App",
  description: "Full-stack authentication with Better Auth",
};

export default function SignInLayout({ children }) {
  return <SignInWrapper>{children}</SignInWrapper>;
}


============================================================
FILE: app/(auth)/signin/page.js
============================================================
import SignInForm from "./_components/SignInForm";

export default function SignInPage() {
  return <SignInForm />;
}


============================================================
FILE: app/(auth)/signup/_components/validation/schema.js
============================================================
import * as Yup from "yup";

export const schema = Yup.object({
  name: Yup.string()
    .min(2, "Name must be at least 2 characters")
    .required("Name is required"),
  email: Yup.string()
    .email("Invalid email address")
    .required("Email is required"),
  password: Yup.string()
    .min(8, "Password must be at least 8 characters")
    .required("Password is required"),
  confirmPassword: Yup.string()
    .oneOf([Yup.ref("password")], "Passwords must match")
    .required("Confirm password is required"),
});


============================================================
FILE: app/(auth)/signup/_components/SignUpForm.jsx
============================================================
"use client";

import { useRouter } from "next/navigation";
import { useMutation } from "@tanstack/react-query";
import { useFormik } from "formik";
import { signup } from "@/requests/auth";
import { schema } from "./validation/schema";
import { toast } from "sonner";
import { Button } from "@/components/ui/button";
import { Field, FieldLabel, FieldError } from "@/components/ui/field";
import { Input } from "@/components/ui/input";

export default function SignUpForm() {
  const router = useRouter();

  const { mutateAsync, isPending } = useMutation({
    mutationFn: signup,
    onSuccess: () => {
      toast.success(
        "Account created! Please check your email to verify your account before signing in."
      );
      router.push("/signin");
    },
    onError: (err) => {
      toast.error(err.message || "Failed to sign up");
    },
  });

  const { handleSubmit, getFieldProps, errors, touched, isValid } = useFormik({
    initialValues: { name: "", email: "", password: "", confirmPassword: "" },
    validationSchema: schema,
    onSubmit: (values) => {
      const { confirmPassword, ...data } = values;
      mutateAsync(data);
    },
  });

  return (
    <form onSubmit={handleSubmit} autoComplete="off" className="space-y-4">
      <Field data-invalid={!!(touched.name && errors.name)}>
        <FieldLabel htmlFor="name">Full Name</FieldLabel>
        <Input
          id="name"
          type="text"
          placeholder="your full name"
          disabled={isPending}
          aria-invalid={!!(touched.name && errors.name)}
          {...getFieldProps("name")}
        />
        <FieldError>{errors.name}</FieldError>
      </Field>
      <Field data-invalid={!!(touched.email && errors.email)}>
        <FieldLabel htmlFor="email">Email</FieldLabel>
        <Input
          id="email"
          type="email"
          placeholder="email address"
          disabled={isPending}
          aria-invalid={!!(touched.email && errors.email)}
          {...getFieldProps("email")}
        />
        <FieldError>{errors.email}</FieldError>
      </Field>
      <Field data-invalid={!!(touched.password && errors.password)}>
        <FieldLabel htmlFor="password">Password</FieldLabel>
        <Input
          id="password"
          type="password"
          placeholder="password"
          disabled={isPending}
          aria-invalid={!!(touched.password && errors.password)}
          {...getFieldProps("password")}
        />
        <FieldError>{errors.password}</FieldError>
      </Field>
      <Field
        data-invalid={!!(touched.confirmPassword && errors.confirmPassword)}
      >
        <FieldLabel htmlFor="confirmPassword">Confirm password</FieldLabel>
        <Input
          id="confirmPassword"
          type="password"
          placeholder="confirm password"
          disabled={isPending}
          aria-invalid={!!(touched.confirmPassword && errors.confirmPassword)}
          {...getFieldProps("confirmPassword")}
        />
        <FieldError>{errors.confirmPassword}</FieldError>
      </Field>
      <Button type="submit" disabled={isPending || !isValid} className="w-full">
        {isPending ? "Creating account..." : "Sign Up"}
      </Button>
    </form>
  );
}


============================================================
FILE: app/(auth)/signup/_components/SignUpWrapper.jsx
============================================================
"use client";

import { Spinner } from "@/components/ui/spinner";
import { authClient } from "@/lib/auth-client";
import { useEffect } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";

export default function SignUpWrapper({ children }) {
  const router = useRouter();
  const { data: session, isPending } = authClient.useSession();
  useEffect(() => {
    if (!isPending && session) {
      router.push("/dashboard");
    }
  }, [session, isPending, router]);
  if (isPending) {
    return <Spinner />;
  }
  if (session) return null;
  return (
    <main className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="max-w-md w-full space-y-4 p-8 bg-white rounded-lg shadow">
        <p className="pb-2">
          <Link href="/" className="text-gray-600 hover:underline">
            Back to Home
          </Link>
        </p>
        <div>
          <h2 className="text-3xl font-bold">Create Account</h2>
          <p className="mt-2 text-sm text-gray-600">
            Join us today! Create your account to get started.
          </p>
        </div>
        {children}
        <p className="text-sm ">
          Already have an account?{" "}
          <Link href="/signin" className="text-blue-600 hover:underline">
            Sign in
          </Link>
        </p>
      </div>
    </main>
  );
}


============================================================
FILE: app/(auth)/signup/layout.js
============================================================
import SignUpWrapper from "./_components/SignUpWrapper";

export const metadata = {
  title: "Better Auth App",
  description: "Full-stack authentication with Better Auth",
};

export default function SignUpLayout({ children }) {
  return <SignUpWrapper>{children}</SignUpWrapper>;
}


============================================================
FILE: app/(auth)/signup/page.js
============================================================
import SignUpForm from "./_components/SignUpForm";

export default function SignUpPage() {
  return <SignUpForm />;
}


============================================================
FILE: app/(dashboard)/admin/courses/_components/CourseDetails.jsx
============================================================
"use client";

import { useQuery } from "@tanstack/react-query";
import { formatDate } from "@/utils/formatDate";
import Link from "next/link";
import { getCourse } from "@/requests/courses";
import Image from "next/image";

export default function CourseDetails({ courseId }) {
  const { data: course, isLoading } = useQuery({
    queryKey: ["courses", courseId],
    queryFn: () => getCourse(courseId),
  });

  if (isLoading) return <p>Loading course...</p>;
  if (!course) return <p>Course not found.</p>;
  const {
    logo,
    title,
    by,
    skills,
    earnedAt,
    grade,
    credential,
    translations: { ar },
  } = course?.content;
  return (
    <div className="bg-white rounded-lg shadow-lg p-8 max-w-2xl w-full">
      <Image
        src={logo}
        alt={`${title} logo`}
        width={60}
        height={60}
        unoptimized
      />
      <h2 className="text-3xl font-bold mb-4">{title}</h2>
      <p className="text-gray-700 mb-2">
        <strong>Provider:</strong> {by}
      </p>
      <p className="text-gray-700 mb-2">
        <strong>Grade:</strong> {grade}
      </p>
      <p className="text-gray-700 mb-2">
        <strong>Skills:</strong> {skills.join(", ")}
      </p>
      <p className="text-gray-700 mb-4">
        <strong>Earned At:</strong> {formatDate(earnedAt)}
      </p>
      <a
        href={credential}
        target="_blank"
        rel="noopener noreferrer"
        className="text-blue-600 hover:underline"
      >
        View Credential
      </a>
      <h2 className="text-2xl font-bold my-4">Arabic translations</h2>
      <div dir="rtl">
        <h3 className="text-3xl font-bold mb-4">{ar.title}</h3>
        <p className="text-gray-700 mb-4">{ar.by}</p>
        <p className="text-gray-600 mb-4">{ar.skills.join(", ")}</p>
      </div>
      <div className="pt-6 flex gap-3">
        <Link
          href={`${courseId}/edit`}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          Edit
        </Link>
        <Link
          href="."
          className="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400"
        >
          Back
        </Link>
      </div>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/admin/courses/_components/CourseForm.jsx
============================================================
"use client";

import React from "react";
import { useRouter } from "next/navigation";
import { useFormik } from "formik";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import * as Yup from "yup";
import { createCourse, getCourse, updateCourse } from "@/requests/courses";
import Link from "next/link";

export default function CourseForm({ mode, courseId }) {
  const router = useRouter();
  const queryClient = useQueryClient();
  const [skillInput, setSkillInput] = React.useState("");
  const [arSkillInput, setArSkillInput] = React.useState("");

  const { data: course } = useQuery({
    queryKey: ["courses", courseId],
    queryFn: () => getCourse(courseId),
    enabled: mode === "edit",
  });

  const mutation = useMutation({
    mutationFn: (values) => {
      if (mode === "edit") {
        return updateCourse(courseId, values);
      } else {
        return createCourse(values);
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries(["courses"]);
      alert(`Course ${mode === "edit" ? "updated" : "created"} successfully!`);
      router.back();
    },
    onError: (err) => {
      alert(err.response?.data?.msg || "Something went wrong");
    },
  });

  const formik = useFormik({
    enableReinitialize: true,
    initialValues: {
      logo: course?.content.logo || "",
      title: course?.content.title || "",
      by: course?.content.by || "",
      skills: course?.content.skills || [],
      earnedAt: course?.content.earnedAt || "",
      grade: course?.content.grade || "",
      credential: course?.content.credential || "",
      translations: {
        ar: {
          title: course?.content.translations.ar.title || "",
          by: course?.content.translations.ar.by || "",
          skills: course?.content.translations.ar.skills || [],
        },
      },
    },
    validationSchema: Yup.object({
      logo: Yup.string().url("Invalid URL").required("Logo is required"),
      title: Yup.string().required("Title is required"),
      by: Yup.string().required("Provider is required"),
      skills: Yup.array()
        .of(Yup.string())
        .min(1, "At least one skill is required")
        .required("Skills are required"),
      earnedAt: Yup.date().required("Earned date is required"),
      grade: Yup.string().required("Grade is required"),
      credential: Yup.string()
        .url("Invalid URL")
        .required("Credential URL is required"),
      translations: Yup.object({
        ar: Yup.object({
          title: Yup.string().required("Arabic title is required"),
          by: Yup.string().required("Arabic provider is required"),
          skills: Yup.array()
            .of(Yup.string())
            .min(1, "At least one Arabic skill is required")
            .required("Arabic skills are required"),
        }),
      }),
    }),
    onSubmit: (values) => {
      const { _id, updatedAt, createdAt, ...data } = values;
      mutation.mutate(data);
    },
  });

  // Skills handlers
  const handleSkillsKeyDown = (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      const skill = skillInput.trim();
      if (skill && !formik.values.skills.includes(skill)) {
        formik.setFieldValue("skills", [...formik.values.skills, skill]);
        setSkillInput("");
      }
    }
  };

  const removeSkill = (indexToRemove) => {
    const newSkills = formik.values.skills.filter(
      (_, index) => index !== indexToRemove
    );
    formik.setFieldValue("skills", newSkills);
  };

  // Arabic skills handlers
  const handleArSkillsKeyDown = (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      const skill = arSkillInput.trim();
      if (skill && !formik.values.translations.ar.skills.includes(skill)) {
        formik.setFieldValue("translations.ar.skills", [
          ...formik.values.translations.ar.skills,
          skill,
        ]);
        setArSkillInput("");
      }
    }
  };

  const removeArSkill = (indexToRemove) => {
    const newSkills = formik.values.translations.ar.skills.filter(
      (_, index) => index !== indexToRemove
    );
    formik.setFieldValue("translations.ar.skills", newSkills);
  };

  return (
    <form onSubmit={formik.handleSubmit} className="space-y-6">
      {/* Main Fields Section */}
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium mb-1">
            Logo URL <span className="text-red-500">*</span>
          </label>
          <input
            type="url"
            name="logo"
            value={formik.values.logo}
            onChange={formik.handleChange}
            placeholder="https://example.com/logo.png"
            className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
          />
          {formik.errors.logo && formik.touched.logo && (
            <p className="text-red-500 text-sm mt-1">{formik.errors.logo}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">
            Title <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            name="title"
            value={formik.values.title}
            onChange={formik.handleChange}
            placeholder="Course Title"
            className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
          />
          {formik.errors.title && formik.touched.title && (
            <p className="text-red-500 text-sm mt-1">{formik.errors.title}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">
            Provider <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            name="by"
            value={formik.values.by}
            onChange={formik.handleChange}
            placeholder="e.g., Coursera, Udemy, edX"
            className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
          />
          {formik.errors.by && formik.touched.by && (
            <p className="text-red-500 text-sm mt-1">{formik.errors.by}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">
            Skills <span className="text-red-500">*</span>
          </label>
          <div className="w-full px-3 py-2 border rounded focus-within:ring-2 focus-within:ring-blue-500 min-h-[42px] flex flex-wrap gap-2 items-center">
            {formik.values.skills.map((skill, index) => (
              <span
                key={index}
                className="inline-flex items-center gap-1 px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium"
              >
                {skill}
                <button
                  type="button"
                  onClick={() => removeSkill(index)}
                  className="hover:bg-blue-200 rounded-full w-4 h-4 flex items-center justify-center"
                  aria-label={`Remove ${skill}`}
                >
                  ×
                </button>
              </span>
            ))}
            <input
              type="text"
              value={skillInput}
              onChange={(e) => setSkillInput(e.target.value)}
              onKeyDown={handleSkillsKeyDown}
              placeholder={
                formik.values.skills.length === 0
                  ? "Type a skill and press Enter or Space"
                  : ""
              }
              className="flex-1 min-w-[200px] outline-none"
            />
          </div>
          <p className="text-gray-500 text-xs mt-1">
            Press Enter or Space to add a skill. Backspace to remove last skill.
          </p>
          {formik.errors.skills && formik.touched.skills && (
            <p className="text-red-500 text-sm mt-1">{formik.errors.skills}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">
            Earned At <span className="text-red-500">*</span>
          </label>
          <input
            type="date"
            name="earnedAt"
            value={formik.values.earnedAt.split("T")[0]}
            onChange={formik.handleChange}
            className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
          />
          {formik.errors.earnedAt && formik.touched.earnedAt && (
            <p className="text-red-500 text-sm mt-1">
              {formik.errors.earnedAt}
            </p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">
            Grade <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            name="grade"
            value={formik.values.grade}
            onChange={formik.handleChange}
            placeholder="e.g., 95%, A+, Distinction"
            className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
          />
          {formik.errors.grade && formik.touched.grade && (
            <p className="text-red-500 text-sm mt-1">{formik.errors.grade}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">
            Credential URL <span className="text-red-500">*</span>
          </label>
          <input
            type="url"
            name="credential"
            value={formik.values.credential}
            onChange={formik.handleChange}
            placeholder="https://example.com/credential"
            className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
          />
          {formik.errors.credential && formik.touched.credential && (
            <p className="text-red-500 text-sm mt-1">
              {formik.errors.credential}
            </p>
          )}
        </div>
      </div>

      {/* Arabic Translations Section */}
      <fieldset className="border border-gray-300 rounded-lg p-4 space-y-4">
        <legend className="text-lg font-semibold px-2">
          Arabic Translations (الترجمة العربية)
        </legend>

        <div>
          <label className="block text-sm font-medium mb-1">
            Arabic Title <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            name="translations.ar.title"
            value={formik.values.translations.ar.title}
            onChange={formik.handleChange}
            dir="rtl"
            className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
          />
          {formik.errors.translations?.ar?.title &&
            formik.touched.translations?.ar?.title && (
              <p className="text-red-500 text-sm mt-1">
                {formik.errors.translations.ar.title}
              </p>
            )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">
            Arabic Provider <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            name="translations.ar.by"
            value={formik.values.translations.ar.by}
            onChange={formik.handleChange}
            dir="rtl"
            className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
          />
          {formik.errors.translations?.ar?.by &&
            formik.touched.translations?.ar?.by && (
              <p className="text-red-500 text-sm mt-1">
                {formik.errors.translations.ar.by}
              </p>
            )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">
            Arabic Skills <span className="text-red-500">*</span>
          </label>
          <div className="w-full px-3 py-2 border rounded focus-within:ring-2 focus-within:ring-blue-500 min-h-[42px] flex flex-wrap gap-2 items-center">
            {formik.values.translations.ar.skills.map((skill, index) => (
              <span
                key={index}
                className="inline-flex items-center gap-1 px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium"
                dir="rtl"
              >
                {skill}
                <button
                  type="button"
                  onClick={() => removeArSkill(index)}
                  className="hover:bg-blue-200 rounded-full w-4 h-4 flex items-center justify-center"
                  aria-label={`Remove ${skill}`}
                >
                  ×
                </button>
              </span>
            ))}
            <input
              type="text"
              value={arSkillInput}
              onChange={(e) => setArSkillInput(e.target.value)}
              onKeyDown={handleArSkillsKeyDown}
              dir="rtl"
              placeholder={
                formik.values.translations.ar.skills.length === 0
                  ? "اكتب مهارة واضغط Enter أو Space"
                  : ""
              }
              className="flex-1 min-w-[200px] outline-none"
            />
          </div>
          <p className="text-gray-500 text-xs mt-1" dir="rtl">
            اضغط Enter أو Space لإضافة مهارة. Backspace لإزالة آخر مهارة.
          </p>
          {formik.errors.translations?.ar?.skills &&
            formik.touched.translations?.ar?.skills && (
              <p className="text-red-500 text-sm mt-1">
                {formik.errors.translations.ar.skills}
              </p>
            )}
        </div>
      </fieldset>

      {/* Form Actions */}
      <div className="pt-6 flex gap-3">
        <button
          type="submit"
          disabled={mutation.isPending}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50"
        >
          {mutation.isPending
            ? `${mode === "edit" ? "Updating..." : "Creating..."}`
            : mode === "edit"
            ? "Update Course"
            : "Create Course"}
        </button>
        <Link
          href="."
          className="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400"
        >
          Cancel
        </Link>
      </div>
    </form>
  );
}


============================================================
FILE: app/(dashboard)/admin/courses/_components/CoursesTable.jsx
============================================================
"use client";

import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { authClient } from "@/lib/auth-client";
import { getCourses, removeCourse } from "@/requests/courses";
import Link from "next/link";

export default function CoursesTable() {
  const queryClient = useQueryClient();
  const { data: session, isPending } = authClient.useSession();
  const { data: courses, isLoading } = useQuery({
    queryKey: ["courses"],
    queryFn: getCourses,
    enabled: !!session,
  });
  const deleteMutation = useMutation({
    mutationFn: (courseId) => removeCourse(courseId),
    onSuccess: () => {
      queryClient.invalidateQueries(["courses"]);
      alert("Course deleted successfully!");
    },
    onError: (err) => {
      alert(err.response?.data?.msg || "Failed to delete course");
    },
  });
  if (isPending) return <div>Loading session...</div>;
  if (session?.user?.role !== "admin")
    return <div>You're not authorized to access this route!</div>;
  return (
    <div className="bg-white rounded-lg shadow p-6">
      <div className="max-w-7xl mx-auto py-4 flex justify-between items-center">
        <h1 className="text-2xl font-bold">Course Management</h1>
        <a href="/dashboard" className="text-blue-600 hover:underline">
          Back to Dashboard
        </a>
      </div>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-xl font-semibold">Courses</h2>
        <Link
          href="courses/create"
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          Add Course
        </Link>
      </div>
      {isLoading ? (
        <p>Loading courses...</p>
      ) : courses?.contents.length === 0 ? (
        <p className="text-gray-500">No courses found.</p>
      ) : (
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              {["Title", "Provider", "Grade", "Skills", "Actions"].map((h) => (
                <th
                  key={h}
                  className="px-6 py-3 text-left text-xs font-medium uppercase text-gray-500"
                >
                  {h}
                </th>
              ))}
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {courses?.contents.map(({ _id, title, by, grade, skills }) => (
              <tr key={_id}>
                <td className="px-6 py-4">{title}</td>
                <td className="px-6 py-4">{by}</td>
                <td className="px-6 py-4">{grade}</td>
                <td className="px-6 py-4">{skills.join(", ")}</td>
                <td className="px-6 py-4 space-x-3">
                  <Link
                    href={`courses/${_id}`}
                    className="text-gray-600 hover:underline"
                  >
                    View
                  </Link>
                  <button
                    onClick={() => {
                      if (confirm("Delete this course?"))
                        deleteMutation.mutate(_id);
                    }}
                    className="text-red-600 cursor-pointer hover:underline"
                  >
                    Delete
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}


============================================================
FILE: app/(dashboard)/admin/courses/[id]/edit/page.js
============================================================
import CourseForm from "../../_components/CourseForm";

export default async function EditCoursePage({ params }) {
  const { id } = await params;
  return (
    <div className="min-h-screen bg-gray-50 flex justify-center items-center">
      <div className="max-w-3xl w-full bg-white shadow rounded-lg p-8">
        <h1 className="text-2xl font-bold mb-6">Edit Course</h1>
        <CourseForm mode="edit" courseId={id} />
      </div>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/admin/courses/[id]/page.js
============================================================
import {
  dehydrate,
  HydrationBoundary,
  QueryClient,
} from "@tanstack/react-query";
import { getCourse } from "@/requests/courses";
import CourseDetails from "../_components/CourseDetails";

export default async function CourseDetailsPage({ params }) {
  const queryClient = new QueryClient();
  const { id } = await params;
  await queryClient.prefetchQuery({
    queryKey: ["courses", id],
    queryFn: getCourse(id),
  });
  return (
    <div className="min-h-screen bg-gray-50 flex justify-center items-center">
      <HydrationBoundary state={dehydrate(queryClient)}>
        <CourseDetails courseId={id} />
      </HydrationBoundary>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/admin/courses/create/page.js
============================================================
import CourseForm from "../_components/CourseForm";

export default function CreateCoursePage() {
  return (
    <div className="min-h-screen bg-gray-50 flex justify-center items-center">
      <div className="max-w-3xl w-full bg-white shadow rounded-lg p-8">
        <h1 className="text-2xl font-bold mb-6">Create Course</h1>
        <CourseForm mode="create" />
      </div>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/admin/courses/page.js
============================================================
import {
  dehydrate,
  HydrationBoundary,
  QueryClient,
} from "@tanstack/react-query";
import CoursesTable from "./_components/CoursesTable";
import { getCourses } from "@/requests/courses";

export default async function CoursesPage() {
  const queryClient = new QueryClient();
  await queryClient.prefetchQuery({
    queryKey: ["courses"],
    queryFn: getCourses,
  });
  return (
    <div className="min-h-screen bg-gray-50">
      <main className="max-w-7xl mx-auto px-4 py-8">
        <HydrationBoundary state={dehydrate(queryClient)}>
          <CoursesTable />
        </HydrationBoundary>
      </main>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/admin/messages/_components/MessageDetails.jsx
============================================================
"use client";

import { useQuery } from "@tanstack/react-query";
import { getMessage } from "@/requests/messages";
import Link from "next/link";
import { formatDate } from "@/utils/formatDate";

export default function MessageDetails({ messageId }) {
  const { data: message, isLoading } = useQuery({
    queryKey: ["messages", messageId],
    queryFn: () => getMessage(messageId),
  });
  if (isLoading) {
    return (
      <div className="text-center py-8 text-gray-600">Loading message...</div>
    );
  }
  if (!message) {
    return (
      <div className="text-center text-gray-500 py-10">Message not found.</div>
    );
  }
  const { name, email, message: msg, createdAt } = message?.content;
  return (
    <div className="bg-white rounded-lg shadow-xl p-8 max-w-2xl w-full">
      <h2 className="text-2xl font-bold mb-4">Message Details</h2>
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-600 mb-1">
            Name
          </label>
          <p className="text-gray-900">{name}</p>
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-600 mb-1">
            Email
          </label>
          <p>
            <a
              href={`mailto:${email}`}
              className="text-blue-600 hover:underline"
            >
              {email}
            </a>
          </p>
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-600 mb-1">
            Message
          </label>
          <p className="text-gray-900 whitespace-pre-wrap">{msg}</p>
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-600 mb-1">
            Received At
          </label>
          <p className="text-gray-700">{formatDate(createdAt, true)}</p>
        </div>
      </div>

      <div className="flex gap-3 pt-6">
        <a
          href={`mailto:${email}?subject=Re: Your Message&body=Hi ${name},%0D%0A%0D%0A`}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          Reply via Email
        </a>
        <Link
          href="."
          className="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400"
        >
          Back
        </Link>
      </div>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/admin/messages/_components/MessageForm.jsx
============================================================
"use client";

import { useMutation, useQueryClient } from "@tanstack/react-query";
import { useFormik } from "formik";
import * as Yup from "yup";
import { useRouter } from "next/navigation";
import { createMessage } from "@/requests/messages";
import Link from "next/link";

export default function MessageForm() {
  const router = useRouter();
  const queryClient = useQueryClient();
  const mutation = useMutation({
    mutationFn: (values) => createMessage(values),
    onSuccess: () => {
      queryClient.invalidateQueries(["messages"]);
      alert(`Message sent successfully!`);
      router.back();
    },
    onError: (error) => {
      alert(error.response?.data?.msg || "Failed to send message");
    },
  });
  const formik = useFormik({
    initialValues: {
      name: "",
      email: "",
      message: "",
    },
    validationSchema: Yup.object({
      name: Yup.string()
        .min(2, "Name must be at least 2 characters")
        .max(50, "Name must not exceed 50 characters")
        .required("Name is required"),
      email: Yup.string()
        .email("Invalid email address")
        .required("Email is required"),
      message: Yup.string()
        .min(5, "Message must be at least 5 characters")
        .max(1000, "Message must not exceed 1000 characters")
        .required("Message is required"),
    }),
    onSubmit: (values) => {
      mutation.mutate(values);
    },
  });
  return (
    <form onSubmit={formik.handleSubmit} className="space-y-4">
      <div>
        <label className="block text-sm font-medium mb-1">
          Name <span className="text-red-500">*</span>
        </label>
        <input
          type="text"
          name="name"
          value={formik.values.name}
          onChange={formik.handleChange}
          onBlur={formik.handleBlur}
          className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
          placeholder="Your name"
        />
        {formik.errors.name && formik.touched.name && (
          <p className="text-red-500 text-sm mt-1">{formik.errors.name}</p>
        )}
      </div>

      <div>
        <label className="block text-sm font-medium mb-1">
          Email <span className="text-red-500">*</span>
        </label>
        <input
          type="email"
          name="email"
          value={formik.values.email}
          onChange={formik.handleChange}
          onBlur={formik.handleBlur}
          className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
          placeholder="your.email@example.com"
        />
        {formik.errors.email && formik.touched.email && (
          <p className="text-red-500 text-sm mt-1">{formik.errors.email}</p>
        )}
      </div>

      <div>
        <label className="block text-sm font-medium mb-1">
          Message <span className="text-red-500">*</span>
        </label>
        <textarea
          name="message"
          value={formik.values.message}
          onChange={formik.handleChange}
          onBlur={formik.handleBlur}
          className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
          rows="6"
          placeholder="Your message..."
        />
        <p className="text-sm text-gray-500 mt-1">
          {formik.values.message.length} / 1000 characters
        </p>
        {formik.errors.message && formik.touched.message && (
          <p className="text-red-500 text-sm mt-1">{formik.errors.message}</p>
        )}
      </div>
      <div className="pt-6 flex gap-3">
        <button
          type="submit"
          disabled={mutation.isPending}
          className="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition"
        >
          {mutation.isPending ? "Sending..." : "Send Message"}
        </button>
        <Link
          href="."
          className="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400"
        >
          Cancel
        </Link>
      </div>
    </form>
  );
}


============================================================
FILE: app/(dashboard)/admin/messages/_components/MessagesTable.jsx
============================================================
"use client";

import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { authClient } from "@/lib/auth-client";
import { getMessages, removeMessage } from "@/requests/messages";
import { formatDate } from "@/utils/formatDate";
import Link from "next/link";

export default function MessagesTable() {
  const queryClient = useQueryClient();
  const { data: session, isPending } = authClient.useSession();
  const { data: messages, isLoading } = useQuery({
    queryKey: ["messages"],
    queryFn: getMessages,
    enabled: !!session,
  });
  const deleteMutation = useMutation({
    mutationFn: (messageId) => removeMessage(messageId),
    onSuccess: () => {
      queryClient.invalidateQueries(["messages"]);
      alert("Message deleted successfully!");
    },
    onError: (err) => {
      alert(err.response?.data?.msg || "Failed to delete message");
    },
  });
  if (isPending)
    return (
      <div className="text-center py-20 text-gray-600">Checking session...</div>
    );
  if (session?.user?.role !== "admin")
    return <div>You're not authorized to access this route!</div>;
  return (
    <div className="bg-white rounded-lg shadow p-6">
      <div className="max-w-7xl mx-auto py-4 flex justify-between items-center">
        <h1 className="text-2xl font-bold">Message Management</h1>
        <a href="/dashboard" className="text-blue-600 hover:underline">
          Back to Dashboard
        </a>
      </div>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-xl font-semibold">Messages</h2>
        <Link
          href="messages/create"
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          Add Message
        </Link>
      </div>

      {isLoading ? (
        <p>Loading messages...</p>
      ) : messages?.contents.length === 0 ? (
        <p className="text-gray-500">No messages found.</p>
      ) : (
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                {["Name", "Email", "Message", "Sent At", "Actions"].map((h) => (
                  <th
                    key={h}
                    className="px-6 py-3 text-left text-xs font-medium uppercase text-gray-500"
                  >
                    {h}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {messages?.contents.map(
                ({ _id, name, email, createdAt, message }) => (
                  <tr key={_id}>
                    <td className="px-6 py-4">{name}</td>
                    <td className="px-6 py-4">
                      <a
                        href={`mailto:${email}`}
                        className="text-blue-600 hover:underline"
                      >
                        {email}
                      </a>
                    </td>
                    <td className="px-6 py-4 max-w-xs truncate">{message}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {formatDate(createdAt, true)}
                    </td>
                    <td className="px-6 py-4 space-x-3">
                      <Link
                        href={`messages/${_id}`}
                        className="text-blue-600 hover:underline"
                      >
                        View
                      </Link>
                      <button
                        onClick={() => {
                          if (
                            confirm(
                              "Are you sure you want to delete this message?"
                            )
                          )
                            deleteMutation.mutate(_id);
                        }}
                        className="text-red-600 hover:underline"
                      >
                        Delete
                      </button>
                    </td>
                  </tr>
                )
              )}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}


============================================================
FILE: app/(dashboard)/admin/messages/[id]/page.js
============================================================
import {
  dehydrate,
  HydrationBoundary,
  QueryClient,
} from "@tanstack/react-query";
import MessageDetails from "../_components/MessageDetails";
import { getMessage } from "@/requests/messages";

export default async function MessageDetailsPage({ params }) {
  const queryClient = new QueryClient();
  const { id } = await params;
  await queryClient.prefetchQuery({
    queryKey: ["messages", id],
    queryFn: getMessage(id),
  });
  return (
    <div className="min-h-screen bg-gray-50 flex justify-center items-center">
      <HydrationBoundary state={dehydrate(queryClient)}>
        <MessageDetails messageId={id} />
      </HydrationBoundary>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/admin/messages/create/page.js
============================================================
import MessageForm from "../_components/MessageForm";

export default function CreateProjectPage() {
  return (
    <div className="min-h-screen bg-gray-50 flex justify-center items-center">
      <div className="max-w-3xl w-full bg-white shadow rounded-lg p-8">
        <h1 className="text-2xl font-bold mb-6">Create Message</h1>
        <MessageForm />
      </div>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/admin/messages/page.js
============================================================
import {
  dehydrate,
  HydrationBoundary,
  QueryClient,
} from "@tanstack/react-query";
import MessagesTable from "./_components/MessagesTable";
import { getMessages } from "@/requests/messages";

export default async function MessagesPage() {
  const queryClient = new QueryClient();
  await queryClient.prefetchQuery({
    queryKey: ["messages"],
    queryFn: getMessages,
  });
  return (
    <div className="min-h-screen bg-gray-50">
      <main className="max-w-7xl mx-auto px-4 py-8">
        <HydrationBoundary state={dehydrate(queryClient)}>
          <MessagesTable />
        </HydrationBoundary>
      </main>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/admin/projects/_components/ProjectDetails.jsx
============================================================
"use client";

import { useQuery } from "@tanstack/react-query";
import { getProject } from "@/requests/projects";
import Link from "next/link";
import Image from "next/image";

export default function ProjectDetails({ projectId }) {
  const { data: project, isLoading } = useQuery({
    queryKey: ["projects", projectId],
    queryFn: () => getProject(projectId),
  });
  if (isLoading) return <p>Loading project...</p>;
  if (!project) return <p>Project not found.</p>;
  const {
    title,
    preview,
    summary,
    tools,
    content: {
      description,
      responsive: { desktop, mobile },
    },
    code,
    demo,
    translations: { ar },
  } = project.content;
  return (
    <div className="bg-white rounded-lg shadow-lg p-8 max-w-3xl w-full">
      <Image
        src={preview}
        alt={`${title} preview`}
        width={200}
        height={200}
        unoptimized
      />
      <h2 className="text-3xl font-bold my-4">{title}</h2>
      <p className="text-gray-700 mb-4">{summary}</p>
      <p className="text-gray-600 mb-2">{tools.join(", ")}</p>
      <p className="text-gray-600 mb-4">{description}</p>
      <div className="space-x-3 mt-6">
        <a
          href={demo}
          target="_blank"
          rel="noopener noreferrer"
          className="text-blue-600 hover:underline"
        >
          Live Demo
        </a>
        <a
          href={code}
          target="_blank"
          rel="noopener noreferrer"
          className="text-blue-600 hover:underline"
        >
          View Code
        </a>
      </div>
      <h2 className="text-2xl font-bold my-4">Arabic translations</h2>
      <div dir="rtl">
        <h3 className="text-3xl font-bold mb-4">{ar.title}</h3>
        <p className="text-gray-700 mb-4">{ar.summary}</p>
        <p className="text-gray-600 mb-4">{ar.content.description}</p>
      </div>
      <h2 className="text-2xl font-bold my-4">Responsive design</h2>
      <div className="flex justify-center items-center gap-4">
        <Image
          src={desktop}
          alt={`${title} desktop preview`}
          width={200}
          height={200}
          unoptimized
        />
        <Image
          src={mobile}
          alt={`${title} mobile preview`}
          width={200}
          height={200}
          unoptimized
        />
      </div>
      <div className="pt-6 flex gap-3">
        <Link
          href={`${projectId}/edit`}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          Edit
        </Link>
        <Link
          href="."
          className="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400"
        >
          Back
        </Link>
      </div>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/admin/projects/_components/ProjectForm.jsx
============================================================
"use client";

import { useRouter } from "next/navigation";
import { useFormik } from "formik";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import * as Yup from "yup";
import { createProject, getProject, updateProject } from "@/requests/projects";
import Link from "next/link";
import { useState } from "react";

export default function ProjectForm({ mode, projectId }) {
  const [toolInput, setToolInput] = useState("");
  const router = useRouter();
  const queryClient = useQueryClient();

  const { data: project, isLoading } = useQuery({
    queryKey: ["projects", projectId],
    queryFn: () => getProject(projectId),
    enabled: mode === "edit",
  });

  const mutation = useMutation({
    mutationFn: (values) => {
      if (mode === "edit") {
        updateProject(projectId, values);
      } else {
        createProject(values);
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries(["projects"]);
      alert(`Project ${mode === "edit" ? "updated" : "created"} successfully!`);
      router.back();
    },
    onError: (err) => {
      alert(err.response?.data?.msg || "Something went wrong");
    },
  });
  const formik = useFormik({
    enableReinitialize: true,
    initialValues: project?.content || {
      preview: "",
      title: "",
      summary: "",
      tools: [],
      demo: "",
      code: "",
      content: {
        description: "",
        responsive: {
          mobile: "",
          desktop: "",
        },
      },
      translations: {
        ar: {
          title: "",
          summary: "",
          content: {
            description: "",
          },
        },
      },
    },
    validationSchema: Yup.object({
      preview: Yup.string().required("Preview is required"),
      title: Yup.string().required("Title is required"),
      summary: Yup.string().required("Summary is required"),
      tools: Yup.array()
        .of(Yup.string())
        .min(1, "At least one tool is required")
        .required("Tools are required"),
      demo: Yup.string()
        .url("Invalid demo URL")
        .required("Demo URL is required"),
      code: Yup.string()
        .url("Invalid code URL")
        .required("Code URL is required"),
      content: Yup.object({
        description: Yup.string().required("Description is required"),
        responsive: Yup.object({
          mobile: Yup.string().required("Mobile preview is required"),
          desktop: Yup.string().required("Desktop preview is required"),
        }),
      }),
      translations: Yup.object({
        ar: Yup.object({
          title: Yup.string().required("Arabic title is required"),
          summary: Yup.string().required("Arabic summary is required"),
          content: Yup.object({
            description: Yup.string().required(
              "Arabic description is required"
            ),
          }),
        }),
      }),
    }),
    onSubmit: (values) => {
      const { _id, updatedAt, createdAt, ...data } = values;
      mutation.mutate(data);
    },
  });

  const handleToolsKeyDown = (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      const tool = toolInput.trim();
      if (tool && !formik.values.tools.includes(tool)) {
        formik.setFieldValue("tools", [...formik.values.tools, tool]);
        setToolInput("");
      }
    }
  };

  const removeTool = (indexToRemove) => {
    const newTools = formik.values.tools.filter(
      (_, index) => index !== indexToRemove
    );
    formik.setFieldValue("tools", newTools);
  };
  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-xl">Loading...</div>
      </div>
    );
  }
  return (
    <form onSubmit={formik.handleSubmit} className="space-y-6">
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium mb-1">
            Preview URL <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            name="preview"
            value={formik.values.preview}
            onChange={formik.handleChange}
            className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
          />
          {formik.errors.preview && formik.touched.preview && (
            <p className="text-red-500 text-sm mt-1">{formik.errors.preview}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">
            Title <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            name="title"
            value={formik.values.title}
            onChange={formik.handleChange}
            className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
          />
          {formik.errors.title && formik.touched.title && (
            <p className="text-red-500 text-sm mt-1">{formik.errors.title}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">
            Summary <span className="text-red-500">*</span>
          </label>
          <textarea
            name="summary"
            value={formik.values.summary}
            onChange={formik.handleChange}
            className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
            rows="3"
          />
          {formik.errors.summary && formik.touched.summary && (
            <p className="text-red-500 text-sm mt-1">{formik.errors.summary}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">
            Tools <span className="text-red-500">*</span>
          </label>
          <div className="w-full px-3 py-2 border rounded focus-within:ring-2 focus-within:ring-blue-500 min-h-[42px] flex flex-wrap gap-2 items-center">
            {formik.values.tools.map((tool, index) => (
              <span
                key={index}
                className="inline-flex items-center gap-1 px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium"
              >
                {tool}
                <button
                  type="button"
                  onClick={() => removeTool(index)}
                  className="hover:bg-blue-200 rounded-full w-4 h-4 flex items-center justify-center"
                  aria-label={`Remove ${tool}`}
                >
                  ×
                </button>
              </span>
            ))}
            <input
              type="text"
              value={toolInput}
              onChange={(e) => setToolInput(e.target.value)}
              onKeyDown={handleToolsKeyDown}
              placeholder={
                formik.values.tools.length === 0
                  ? "Type a tool and press Enter or Space"
                  : ""
              }
              className="flex-1 min-w-[200px] outline-none"
            />
          </div>
          <p className="text-gray-500 text-xs mt-1">
            Press Enter or Space to add a tool. Backspace to remove last tool.
          </p>
          {formik.errors.tools && formik.touched.tools && (
            <p className="text-red-500 text-sm mt-1">{formik.errors.tools}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">
            Demo URL <span className="text-red-500">*</span>
          </label>
          <input
            type="url"
            name="demo"
            value={formik.values.demo}
            onChange={formik.handleChange}
            className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
          />
          {formik.errors.demo && formik.touched.demo && (
            <p className="text-red-500 text-sm mt-1">{formik.errors.demo}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">
            Code URL <span className="text-red-500">*</span>
          </label>
          <input
            type="url"
            name="code"
            value={formik.values.code}
            onChange={formik.handleChange}
            className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
          />
          {formik.errors.code && formik.touched.code && (
            <p className="text-red-500 text-sm mt-1">{formik.errors.code}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">
            Description <span className="text-red-500">*</span>
          </label>
          <textarea
            name="content.description"
            value={formik.values.content.description}
            onChange={formik.handleChange}
            className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
            rows="4"
          />
          {formik.errors.content?.description &&
            formik.touched.content?.description && (
              <p className="text-red-500 text-sm mt-1">
                {formik.errors.content.description}
              </p>
            )}
        </div>

        <div className="grid grid-cols-2 gap-3">
          <div>
            <label className="block text-sm font-medium mb-1">
              Mobile Preview URL <span className="text-red-500">*</span>
            </label>
            <input
              type="url"
              name="content.responsive.mobile"
              value={formik.values.content.responsive.mobile}
              onChange={formik.handleChange}
              className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
            />
            {formik.errors.content?.responsive?.mobile &&
              formik.touched.content?.responsive?.mobile && (
                <p className="text-red-500 text-sm mt-1">
                  {formik.errors.content.responsive.mobile}
                </p>
              )}
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">
              Desktop Preview URL <span className="text-red-500">*</span>
            </label>
            <input
              type="url"
              name="content.responsive.desktop"
              value={formik.values.content.responsive.desktop}
              onChange={formik.handleChange}
              className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
            />
            {formik.errors.content?.responsive?.desktop &&
              formik.touched.content?.responsive?.desktop && (
                <p className="text-red-500 text-sm mt-1">
                  {formik.errors.content.responsive.desktop}
                </p>
              )}
          </div>
        </div>
      </div>

      {/* Arabic Translations Section */}
      <fieldset className="border border-gray-300 rounded-lg p-4 space-y-4">
        <legend className="text-lg font-semibold px-2">
          Arabic Translations (الترجمة العربية)
        </legend>

        <div>
          <label className="block text-sm font-medium mb-1">
            Arabic Title <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            name="translations.ar.title"
            value={formik.values.translations.ar.title}
            onChange={formik.handleChange}
            dir="rtl"
            className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
          />
          {formik.errors.translations?.ar?.title &&
            formik.touched.translations?.ar?.title && (
              <p className="text-red-500 text-sm mt-1">
                {formik.errors.translations.ar.title}
              </p>
            )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">
            Arabic Summary <span className="text-red-500">*</span>
          </label>
          <textarea
            name="translations.ar.summary"
            value={formik.values.translations.ar.summary}
            onChange={formik.handleChange}
            dir="rtl"
            className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
            rows="3"
          />
          {formik.errors.translations?.ar?.summary &&
            formik.touched.translations?.ar?.summary && (
              <p className="text-red-500 text-sm mt-1">
                {formik.errors.translations.ar.summary}
              </p>
            )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">
            Arabic Description <span className="text-red-500">*</span>
          </label>
          <textarea
            name="translations.ar.content.description"
            value={formik.values.translations.ar.content.description}
            onChange={formik.handleChange}
            dir="rtl"
            className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
            rows="4"
          />
          {formik.errors.translations?.ar?.content?.description &&
            formik.touched.translations?.ar?.content?.description && (
              <p className="text-red-500 text-sm mt-1">
                {formik.errors.translations.ar.content.description}
              </p>
            )}
        </div>
      </fieldset>

      {/* Form Actions */}
      <div className="pt-6 flex gap-3">
        <button
          type="submit"
          disabled={mutation.isPending}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50"
        >
          {mutation.isPending
            ? `${mode === "edit" ? "Updating..." : "Creating..."}`
            : mode === "edit"
            ? "Update Project"
            : "Create Project"}
        </button>
        <Link
          href="."
          className="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400"
        >
          Cancel
        </Link>
      </div>
    </form>
  );
}


============================================================
FILE: app/(dashboard)/admin/projects/_components/ProjectsTable.jsx
============================================================
"use client";

import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { authClient } from "@/lib/auth-client";
import Link from "next/link";
import { getProjects, removeProject } from "@/requests/projects";

export default function ProjectsTable() {
  const queryClient = useQueryClient();
  const { data: session, isPending } = authClient.useSession();
  const { data: projects, isLoading } = useQuery({
    queryKey: ["projects"],
    queryFn: getProjects,
    enabled: !!session,
  });
  const deleteMutation = useMutation({
    mutationFn: (projectId) => removeProject(projectId),
    onSuccess: () => {
      queryClient.invalidateQueries(["projects"]);
      alert("Project deleted successfully!");
    },
    onError: (err) => {
      alert(err.response?.data?.msg || "Failed to delete project");
    },
  });
  if (isPending) return <div>Checking session...</div>;
  if (session?.user?.role !== "admin")
    return <div>You're not authorized to access this route!</div>;
  return (
    <div className="bg-white rounded-lg shadow p-6">
      <div className="max-w-7xl mx-auto py-4 flex justify-between items-center">
        <h1 className="text-2xl font-bold">Project Management</h1>
        <a href="/dashboard" className="text-blue-600 hover:underline">
          Back to Dashboard
        </a>
      </div>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-xl font-semibold">Projects</h2>
        <Link
          href="projects/create"
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          Add Project
        </Link>
      </div>

      {isLoading ? (
        <p>Loading projects...</p>
      ) : projects?.contents.length === 0 ? (
        <p className="text-gray-500">No projects found.</p>
      ) : (
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                {["Title", "Summary", "Tools", "Actions"].map((h) => (
                  <th
                    key={h}
                    className="px-6 py-3 text-left text-xs font-medium uppercase text-gray-500"
                  >
                    {h}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {projects?.contents.map(({ _id, title, summary, tools }) => (
                <tr key={_id}>
                  <td className="px-6 py-4">{title}</td>
                  <td className="px-6 py-4 max-w-xs truncate">{summary}</td>
                  <td className="px-6 py-4">{tools.join(", ")}</td>
                  <td className="px-6 py-4 space-x-3">
                    <Link
                      href={`projects/${_id}`}
                      className="text-gray-600 hover:underline"
                    >
                      View
                    </Link>
                    <button
                      onClick={() => {
                        if (confirm("Delete this project?"))
                          deleteMutation.mutateAsync(_id);
                      }}
                      className="text-red-600 cursor-pointer hover:underline"
                    >
                      Delete
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}


============================================================
FILE: app/(dashboard)/admin/projects/[id]/edit/page.js
============================================================
import ProjectForm from "../../_components/ProjectForm";

export default async function EditProjectPage({ params }) {
  const { id } = await params;
  return (
    <div className="min-h-screen bg-gray-50 flex justify-center items-center">
      <div className="max-w-3xl w-full bg-white shadow rounded-lg p-8">
        <h1 className="text-2xl font-bold mb-6">Edit Project</h1>
        <ProjectForm mode="edit" projectId={id} />
      </div>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/admin/projects/[id]/page.js
============================================================
import {
  dehydrate,
  HydrationBoundary,
  QueryClient,
} from "@tanstack/react-query";
import ProjectDetails from "../_components/ProjectDetails";
import { getProject } from "@/requests/projects";

export default async function ProjectPage({ params }) {
  const { id } = await params;
  const queryClient = new QueryClient();
  await queryClient.prefetchQuery({
    queryKey: ["projects", id],
    queryFn: getProject(id),
  });
  return (
    <div className="min-h-screen bg-gray-50 flex justify-center items-center">
      <HydrationBoundary state={dehydrate(queryClient)}>
        <ProjectDetails projectId={id} />
      </HydrationBoundary>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/admin/projects/create/page.js
============================================================
import ProjectForm from "../_components/ProjectForm";

export default function CreateProjectPage() {
  return (
    <div className="min-h-screen bg-gray-50 flex justify-center items-center">
      <div className="max-w-3xl w-full bg-white shadow rounded-lg p-8">
        <h1 className="text-2xl font-bold mb-6">Create Project</h1>
        <ProjectForm mode="create" />
      </div>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/admin/projects/page.js
============================================================
import {
  dehydrate,
  HydrationBoundary,
  QueryClient,
} from "@tanstack/react-query";
import ProjectsTable from "./_components/ProjectsTable";
import { getProjects } from "@/requests/projects";

export default async function ProjectsPage() {
  const queryClient = new QueryClient();
  await queryClient.prefetchQuery({
    queryKey: ["projects"],
    queryFn: getProjects,
  });
  return (
    <div className="min-h-screen bg-gray-50">
      <main className="max-w-7xl mx-auto px-4 py-8">
        <HydrationBoundary state={dehydrate(queryClient)}>
          <ProjectsTable />
        </HydrationBoundary>
      </main>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/admin/universities/_components/UniversitiesTable.jsx
============================================================
"use client";

import { authClient } from "@/lib/auth-client";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { getUniversities, removeUniversity } from "@/requests/universities";
import Link from "next/link";
import { Spinner } from "@/components/ui/spinner";
import { toast } from "sonner";

export default function UniversitiesTable() {
  const { data: session, isPending } = authClient.useSession();
  const queryClient = useQueryClient();
  const { data: universities, isLoading } = useQuery({
    queryKey: ["universities"],
    queryFn: getUniversities,
    enabled: !!session,
  });
  const deleteMutation = useMutation({
    mutationFn: removeUniversity,
    onSuccess: () => {
      queryClient.invalidateQueries(["universities"]);
      toast.success("University deleted successfully!");
    },
    onError: (error) => toast.error(error.message),
  });
  if (isPending) return <Spinner />;
  if (session?.user?.role !== "admin") return null;
  return (
    <>
      {isLoading ? (
        <p>Loading universities...</p>
      ) : universities?.contents.length === 0 ? (
        <p className="text-gray-500">No universities found.</p>
      ) : (
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                {["Title", "Provider", "Status", "Actions"].map((h) => (
                  <th
                    key={h}
                    className="px-6 py-3 text-left text-xs font-medium uppercase text-gray-500"
                  >
                    {h}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {universities?.contents.map(({ _id, title, by, status }) => (
                <tr key={_id}>
                  <td className="px-6 py-4">{title}</td>
                  <td className="px-6 py-4">{by}</td>
                  <td className="px-6 py-4">
                    <span
                      className={`px-2 py-1 rounded text-xs ${
                        status === "graduated"
                          ? "bg-green-100 text-green-800"
                          : "bg-yellow-100 text-yellow-800"
                      }`}
                    >
                      {status}
                    </span>
                  </td>
                  <td className="px-6 py-4 space-x-3">
                    <Link
                      href={`universities/${_id}`}
                      className="text-gray-600 hover:underline"
                    >
                      View
                    </Link>
                    <button
                      onClick={() => {
                        if (confirm("Delete this university?"))
                          deleteMutation.mutate(_id);
                      }}
                      className="text-red-600 cursor-pointer hover:underline"
                    >
                      Delete
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </>
  );
}


============================================================
FILE: app/(dashboard)/admin/universities/_components/UniversitiesWrapper.jsx
============================================================
import { Button } from "@/components/ui/button";
import Link from "next/link";

export default function UniversitiesWrapper({ children }) {
  return (
    <div className="min-h-screen bg-gray-50">
      <main className="max-w-7xl mx-auto px-4 py-8">
        <div className="bg-white rounded-lg shadow p-6">
          <div className="max-w-7xl mx-auto py-4 flex justify-between items-center">
            <h1 className="text-2xl font-bold">University Management</h1>
            <Link href="/dashboard" className="text-blue-600 hover:underline">
              Back to Dashboard
            </Link>
          </div>
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-xl font-semibold">Universities</h2>
            <Button className="cursor-pointer" asChild>
              <Link href="universities/create">Add University</Link>
            </Button>
          </div>
          {children}
        </div>
      </main>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/admin/universities/_components/UniversityDetails.jsx
============================================================
"use client";

import { useQuery } from "@tanstack/react-query";
import { getUniversity } from "@/requests/universities";
import { formatDate } from "@/utils/formatDate";
import Link from "next/link";
import Image from "next/image";

export default function UniversityDetails({ universityId }) {
  const { data: university, isLoading } = useQuery({
    queryKey: ["universities", universityId],
    queryFn: () => getUniversity(universityId),
  });
  if (isLoading) return <p>Loading...</p>;
  if (!university) return <p>University not found.</p>;
  const {
    by,
    grade,
    logo,
    skills,
    startedAt,
    graduatedAt,
    status,
    title,
    translations: { ar },
  } = university?.content;
  return (
    <div className="bg-white shadow rounded-lg p-8 max-w-3xl w-full">
      <Image src={logo} alt={`${by} logo`} width={60} height={60} unoptimized />
      <h2 className="text-3xl font-bold mb-4">{title}</h2>
      <p className="text-gray-700 mb-2">
        <strong>Provider:</strong> {by}
      </p>
      <p className="text-gray-700 mb-2">
        <strong>Status:</strong> {status}
      </p>
      {status === "in-progress"
        ? startedAt && (
            <p className="text-gray-700 mb-2">
              <strong>Started:</strong> {formatDate(startedAt)}
            </p>
          )
        : graduatedAt && (
            <p className="text-gray-700 mb-2">
              <strong>Graduated:</strong> {formatDate(graduatedAt)}
            </p>
          )}
      {grade && (
        <p className="text-gray-700 mb-2">
          <strong>Grade:</strong> {grade}
        </p>
      )}
      {skills && (
        <p className="text-gray-700 mb-4">
          <strong>Skills:</strong> {skills.join(", ")}
        </p>
      )}
      <h2 className="text-2xl font-bold my-4">Arabic translations</h2>
      <div dir="rtl">
        <h3 className="text-3xl font-bold mb-4">{ar.title}</h3>
        <p className="text-gray-700 mb-4">{ar.by}</p>
        {ar.skills && (
          <p className="text-gray-700 mb-4">
            <strong>المهارات:</strong> {ar.skills.join(", ")}
          </p>
        )}
      </div>
      <div className="flex gap-3 mt-6">
        <Link
          href={`${universityId}/edit`}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          Edit
        </Link>
        <Link
          href="."
          className="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400"
        >
          Back
        </Link>
      </div>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/admin/universities/_components/UniversityForm.jsx
============================================================
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { useFormik } from "formik";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import * as Yup from "yup";
import Link from "next/link";
import {
  createUniversity,
  getUniversity,
  updateUniversity,
} from "@/requests/universities";

export default function UniversityForm({ mode, universityId }) {
  const router = useRouter();
  const queryClient = useQueryClient();
  const [skillInput, setSkillInput] = useState("");
  const [arSkillInput, setArSkillInput] = useState("");
  const { data: university } = useQuery({
    queryKey: ["universities", universityId],
    queryFn: () => getUniversity(universityId),
    enabled: mode === "edit",
  });
  const mutation = useMutation({
    mutationFn: (values) => {
      if (mode === "edit") {
        updateUniversity(universityId, values);
      } else {
        createUniversity(values);
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries(["universities"]);
      alert(
        `University ${mode === "edit" ? "updated" : "created"} successfully!`
      );
      router.back();
    },
    onError: (err) => {
      alert(err.response?.data?.msg || "Error occurred");
    },
  });

  const formik = useFormik({
    enableReinitialize: true,
    initialValues: {
      logo: university?.content.logo || "",
      title: university?.content.title || "",
      by: university?.content.by || "",
      status: university?.content.status || "in-progress",
      startedAt: university?.content.startedAt || "",
      graduatedAt: university?.content.graduatedAt || "",
      grade: university?.content.grade || "",
      skills: university?.content.skills || [],
      translations: {
        ar: {
          title: university?.content.translations?.ar?.title || "",
          by: university?.content.translations?.ar?.by || "",
          skills: university?.content.translations?.ar?.skills || [],
        },
      },
    },
    validationSchema: Yup.object({
      logo: Yup.string().url("Invalid URL").required("Logo is required"),
      title: Yup.string().required("Title is required"),
      by: Yup.string().required("Institution name is required"),
      status: Yup.string()
        .oneOf(["in-progress", "graduated"])
        .required("Status is required"),
      startedAt: Yup.date().when("status", {
        is: "in-progress",
        then: (schema) =>
          schema.required("Started date is required for in-progress status"),
        otherwise: (schema) => schema.nullable(),
      }),
      graduatedAt: Yup.date().when("status", {
        is: "graduated",
        then: (schema) =>
          schema.required("Graduation date is required for graduated status"),
        otherwise: (schema) => schema.nullable(),
      }),
      grade: Yup.string(),
      skills: Yup.array().of(Yup.string()),
      translations: Yup.object({
        ar: Yup.object({
          title: Yup.string().required("Arabic title is required"),
          by: Yup.string().required("Arabic institution name is required"),
          skills: Yup.array().of(Yup.string()),
        }),
      }),
    }),
    onSubmit: (values) => {
      const { _id, updatedAt, createdAt, startedAt, graduatedAt, ...data } =
        values;
      if (data.status === "graduated") {
        mutation.mutate({ ...data, graduatedAt });
      } else if (data.status === "in-progress") {
        mutation.mutate({ ...data, startedAt });
      }
    },
  });
  const handleSkillsKeyDown = (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      const skill = skillInput.trim();
      if (skill && !formik.values.skills.includes(skill)) {
        formik.setFieldValue("skills", [...formik.values.skills, skill]);
        setSkillInput("");
      }
    }
  };
  const removeSkill = (indexToRemove) => {
    const newSkills = formik.values.skills.filter(
      (_, index) => index !== indexToRemove
    );
    formik.setFieldValue("skills", newSkills);
  };
  const handleArSkillsKeyDown = (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      const skill = arSkillInput.trim();
      if (skill && !formik.values.translations.ar.skills.includes(skill)) {
        formik.setFieldValue("translations.ar.skills", [
          ...formik.values.translations.ar.skills,
          skill,
        ]);
        setArSkillInput("");
      }
    }
  };

  const removeArSkill = (indexToRemove) => {
    const newSkills = formik.values.translations.ar.skills.filter(
      (_, index) => index !== indexToRemove
    );
    formik.setFieldValue("translations.ar.skills", newSkills);
  };
  return (
    <form onSubmit={formik.handleSubmit} className="space-y-6">
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium mb-1">
            Logo URL <span className="text-red-500">*</span>
          </label>
          <input
            type="url"
            name="logo"
            value={formik.values.logo}
            onChange={formik.handleChange}
            placeholder="https://example.com/logo.png"
            className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
          />
          {formik.errors.logo && formik.touched.logo && (
            <p className="text-red-500 text-sm mt-1">{formik.errors.logo}</p>
          )}
        </div>
        <div>
          <label className="block text-sm font-medium mb-1">
            Title <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            name="title"
            value={formik.values.title}
            onChange={formik.handleChange}
            placeholder="Bachelor of Computer Science"
            className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
          />
          {formik.errors.title && formik.touched.title && (
            <p className="text-red-500 text-sm mt-1">{formik.errors.title}</p>
          )}
        </div>
        <div>
          <label className="block text-sm font-medium mb-1">
            Institution <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            name="by"
            value={formik.values.by}
            onChange={formik.handleChange}
            placeholder="University Name"
            className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
          />
          {formik.errors.by && formik.touched.by && (
            <p className="text-red-500 text-sm mt-1">{formik.errors.by}</p>
          )}
        </div>
        <div>
          <label className="block text-sm font-medium mb-1">
            Status <span className="text-red-500">*</span>
          </label>
          <select
            name="status"
            value={formik.values.status}
            onChange={formik.handleChange}
            className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
          >
            <option value="in-progress">In Progress</option>
            <option value="graduated">Graduated</option>
          </select>
          {formik.errors.status && formik.touched.status && (
            <p className="text-red-500 text-sm mt-1">{formik.errors.status}</p>
          )}
        </div>

        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">
              Started At
              {formik.values.status === "in-progress" && (
                <span className="text-red-500"> *</span>
              )}
            </label>
            <input
              type="date"
              name="startedAt"
              value={
                formik.values.status !== "in-progress"
                  ? ""
                  : formik.values.startedAt.split("T")[0]
              }
              onChange={formik.handleChange}
              disabled={formik.values.status === "graduated"}
              className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500 disabled:bg-gray-100 disabled:cursor-not-allowed"
            />
            {formik.errors.startedAt && formik.touched.startedAt && (
              <p className="text-red-500 text-sm mt-1">
                {formik.errors.startedAt}
              </p>
            )}
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">
              Graduated At
              {formik.values.status === "graduated" && (
                <span className="text-red-500"> *</span>
              )}
            </label>
            <input
              type="date"
              name="graduatedAt"
              value={
                formik.values.status !== "graduated"
                  ? ""
                  : formik.values.graduatedAt.split("T")[0]
              }
              onChange={formik.handleChange}
              disabled={formik.values.status === "in-progress"}
              className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500 disabled:bg-gray-100 disabled:cursor-not-allowed"
            />
            {formik.errors.graduatedAt && formik.touched.graduatedAt && (
              <p className="text-red-500 text-sm mt-1">
                {formik.errors.graduatedAt}
              </p>
            )}
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">Grade</label>
          <input
            type="text"
            name="grade"
            value={formik.values.grade}
            onChange={formik.handleChange}
            placeholder="e.g., 3.8 GPA, First Class Honours"
            className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">Skills</label>
          <div className="w-full px-3 py-2 border rounded focus-within:ring-2 focus-within:ring-blue-500 min-h-[42px] flex flex-wrap gap-2 items-center">
            {formik.values.skills.map((skill, index) => (
              <span
                key={index}
                className="inline-flex items-center gap-1 px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium"
              >
                {skill}
                <button
                  type="button"
                  onClick={() => removeSkill(index)}
                  className="hover:bg-blue-200 rounded-full w-4 h-4 flex items-center justify-center"
                  aria-label={`Remove ${skill}`}
                >
                  ×
                </button>
              </span>
            ))}
            <input
              type="text"
              value={skillInput}
              onChange={(e) => setSkillInput(e.target.value)}
              onKeyDown={handleSkillsKeyDown}
              placeholder={
                formik.values.skills.length === 0
                  ? "Type a skill and press Enter or Space"
                  : ""
              }
              className="flex-1 min-w-[200px] outline-none"
            />
          </div>
          <p className="text-gray-500 text-xs mt-1">
            Press Enter or Space to add a skill. Backspace to remove last skill.
          </p>
        </div>
      </div>

      {/* Arabic Translations Section */}
      <fieldset className="border border-gray-300 rounded-lg p-4 space-y-4">
        <legend className="text-lg font-semibold px-2">
          Arabic Translations (الترجمة العربية)
        </legend>

        <div>
          <label className="block text-sm font-medium mb-1">
            Arabic Title <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            name="translations.ar.title"
            value={formik.values.translations.ar.title}
            onChange={formik.handleChange}
            dir="rtl"
            className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
          />
          {formik.errors.translations?.ar?.title &&
            formik.touched.translations?.ar?.title && (
              <p className="text-red-500 text-sm mt-1">
                {formik.errors.translations.ar.title}
              </p>
            )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">
            Arabic Institution <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            name="translations.ar.by"
            value={formik.values.translations.ar.by}
            onChange={formik.handleChange}
            dir="rtl"
            className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
          />
          {formik.errors.translations?.ar?.by &&
            formik.touched.translations?.ar?.by && (
              <p className="text-red-500 text-sm mt-1">
                {formik.errors.translations.ar.by}
              </p>
            )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">
            Arabic Skills
          </label>
          <div className="w-full px-3 py-2 border rounded focus-within:ring-2 focus-within:ring-blue-500 min-h-[42px] flex flex-wrap gap-2 items-center">
            {formik.values.translations.ar.skills.map((skill, index) => (
              <span
                key={index}
                className="inline-flex items-center gap-1 px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium"
                dir="rtl"
              >
                {skill}
                <button
                  type="button"
                  onClick={() => removeArSkill(index)}
                  className="hover:bg-blue-200 rounded-full w-4 h-4 flex items-center justify-center"
                  aria-label={`Remove ${skill}`}
                >
                  ×
                </button>
              </span>
            ))}
            <input
              type="text"
              value={arSkillInput}
              onChange={(e) => setArSkillInput(e.target.value)}
              onKeyDown={handleArSkillsKeyDown}
              dir="rtl"
              placeholder={
                formik.values.translations.ar.skills.length === 0
                  ? "اكتب مهارة واضغط Enter أو Space"
                  : ""
              }
              className="flex-1 min-w-[200px] outline-none"
            />
          </div>
          <p className="text-gray-500 text-xs mt-1" dir="rtl">
            اضغط Enter أو Space لإضافة مهارة. Backspace لإزالة آخر مهارة.
          </p>
        </div>
      </fieldset>

      {/* Form Actions */}
      <div className="pt-6 flex gap-3">
        <button
          type="submit"
          disabled={mutation.isPending}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50"
        >
          {mutation.isPending
            ? `${mode === "edit" ? "Updating..." : "Creating..."}`
            : mode === "edit"
            ? "Update University"
            : "Create University"}
        </button>
        <Link
          href="."
          className="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400"
        >
          Cancel
        </Link>
      </div>
    </form>
  );
}


============================================================
FILE: app/(dashboard)/admin/universities/[id]/edit/page.js
============================================================
import UniversityForm from "../../_components/UniversityForm";

export default async function EditUniversityPage({ params }) {
  const { id } = await params;
  return (
    <div className="min-h-screen bg-gray-50 flex justify-center items-center">
      <div className="max-w-3xl w-full bg-white shadow rounded-lg p-8">
        <h1 className="text-2xl font-bold mb-6">Edit University</h1>
        <UniversityForm mode="edit" universityId={id} />
      </div>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/admin/universities/[id]/page.js
============================================================
import {
  dehydrate,
  HydrationBoundary,
  QueryClient,
} from "@tanstack/react-query";
import UniversityDetails from "../_components/UniversityDetails";
import { getUniversity } from "@/requests/universities";

export default async function UniversityPage({ params }) {
  const queryClient = new QueryClient();
  const { id } = await params;
  await queryClient.prefetchQuery({
    queryKey: ["universities", id],
    queryFn: getUniversity(id),
  });
  return (
    <div className="min-h-screen bg-gray-50 flex justify-center items-center">
      <HydrationBoundary state={dehydrate(queryClient)}>
        <UniversityDetails universityId={id} />
      </HydrationBoundary>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/admin/universities/create/page.js
============================================================
import UniversityForm from "../_components/UniversityForm";

export default function CreateUniversityPage() {
  return (
    <div className="min-h-screen bg-gray-50 flex justify-center items-center">
      <div className="max-w-3xl w-full bg-white shadow rounded-lg p-8">
        <h1 className="text-2xl font-bold mb-6">Add University</h1>
        <UniversityForm mode="create" />
      </div>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/admin/universities/layout.js
============================================================
import React from "react";
import UniversitiesWrapper from "./_components/UniversitiesWrapper";

export default function UniversitiesLayout({ children }) {
  return <UniversitiesWrapper>{children}</UniversitiesWrapper>;
}


============================================================
FILE: app/(dashboard)/admin/universities/page.js
============================================================
import {
  dehydrate,
  HydrationBoundary,
  QueryClient,
} from "@tanstack/react-query";
import UniversitiesTable from "./_components/UniversitiesTable";
import { getUniversities } from "@/requests/universities";

export default async function UniversitiesPage() {
  const queryClient = new QueryClient();
  await queryClient.prefetchQuery({
    queryKey: ["universities"],
    queryFn: getUniversities,
  });
  return (
    <HydrationBoundary state={dehydrate(queryClient)}>
      <UniversitiesTable />
    </HydrationBoundary>
  );
}


============================================================
FILE: app/(dashboard)/admin/users/_components/UserForm.jsx
============================================================
"use client";

import { useRouter } from "next/navigation";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { useFormik } from "formik";
import Link from "next/link";
import * as Yup from "yup";
import { createUser } from "@/requests/users";
import { toast } from "sonner";
import { authClient } from "@/lib/auth-client";
import { useEffect } from "react";
import { Field, FieldError, FieldLabel } from "@/components/ui/field";
import { Spinner } from "@/components/ui/spinner";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Skeleton } from "@/components/ui/skeleton";
import { Button } from "@/components/ui/button";

export default function UserForm() {
  const router = useRouter();
  const { data: session, isPending } = authClient.useSession();
  const queryClient = useQueryClient();
  useEffect(() => {
    if (!isPending) {
      if (!session) {
        toast.warning("Your session is expired!");
        router.push("/signin");
      } else if (session?.user?.role !== "admin") {
        toast.warning("You're not authorized to access this route!");
        router.push("/dashboard");
      }
    }
  }, [session, isPending, router]);
  const createUserMutation = useMutation({
    mutationFn: createUser,
    onSuccess: () => {
      queryClient.invalidateQueries(["users"]);
      toast.success("The user has been created");
      router.push(".");
    },
    onError: (error) => toast.error(error.message),
  });
  const validationSchema = Yup.object({
    name: Yup.string()
      .min(2, "Name must be at least 2 characters")
      .required("Name is required"),
    email: Yup.string()
      .email("Invalid email address")
      .required("Email is required"),
    password: Yup.string()
      .min(8, "Password must be at least 8 characters")
      .matches(
        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/,
        "Password must contain at least one uppercase letter, one lowercase letter, and one number"
      )
      .required("Password is required"),
    role: Yup.string()
      .oneOf(["user", "admin"], "Invalid role")
      .required("Role is required"),
  });
  const formik = useFormik({
    initialValues: {
      name: "",
      email: "",
      password: "",
      role: "user",
    },
    validationSchema,
    onSubmit: (values) => {
      createUserMutation.mutate(values);
    },
  });
  if (isPending)
    return (
      <div className="grid gap-6">
        {Array.from({ length: 4 }).map((_, i) => (
          <div key={i} className="flex flex-col gap-3">
            <Skeleton className="h-[25px] w-[200px] rounded-full" />
            <Skeleton className="h-[30px] w-full rounded-full" />
          </div>
        ))}
      </div>
    );
  if (session?.user?.role !== "admin") return null;
  return (
    <form onSubmit={formik.handleSubmit} noValidate className="space-y-4">
      <Field data-invalid={!!(formik.touched.name && formik.errors.name)}>
        <FieldLabel htmlFor="name">
          Name <span className="text-red-500">*</span>
        </FieldLabel>
        <Input
          id="name"
          type="text"
          placeholder="Your name"
          {...formik.getFieldProps("name")}
          aria-invalid={!!(formik.touched.name && formik.errors.name)}
        />
        {formik.touched.name && formik.errors.name && (
          <FieldError id="name-error">{formik.errors.name}</FieldError>
        )}
      </Field>
      <Field data-invalid={!!(formik.touched.email && formik.errors.email)}>
        <FieldLabel htmlFor="email">
          Email <span className="text-red-500">*</span>
        </FieldLabel>
        <Input
          id="email"
          type="email"
          placeholder="Email address"
          {...formik.getFieldProps("email")}
          aria-invalid={!!(formik.touched.email && formik.errors.email)}
        />
        {formik.touched.email && formik.errors.email && (
          <FieldError id="email-error">{formik.errors.email}</FieldError>
        )}
      </Field>
      <Field
        data-invalid={!!(formik.touched.password && formik.errors.password)}
      >
        <FieldLabel htmlFor="password">
          Password <span className="text-red-500">*</span>
        </FieldLabel>
        <Input
          id="password"
          type="password"
          placeholder="Your password"
          {...formik.getFieldProps("password")}
          aria-invalid={!!(formik.touched.password && formik.errors.password)}
        />
        {formik.touched.password && formik.errors.password && (
          <FieldError id="password-error">{formik.errors.password}</FieldError>
        )}
      </Field>
      <Field data-invalid={!!(formik.touched.role && formik.errors.role)}>
        <FieldLabel htmlFor="role">
          Role <span className="text-red-500">*</span>
        </FieldLabel>
        <Select
          value={formik.values.role}
          onValueChange={(value) => {
            formik.setFieldValue("role", value);
          }}
        >
          <SelectTrigger
            id="role"
            aria-invalid={!!(formik.touched.role && formik.errors.role)}
          >
            <SelectValue placeholder="Choose user's role" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="user">User</SelectItem>
            <SelectItem value="admin">Admin</SelectItem>
          </SelectContent>
        </Select>
        {formik.touched.role && formik.errors.role && (
          <FieldError id="role-error">{formik.errors.role}</FieldError>
        )}
      </Field>
      <div className="flex gap-3 justify-center pt-2">
        <Button
          type="submit"
          disabled={createUserMutation.isPending || !formik.isValid}
          className="flex-1 md:max-w-sm cursor-pointer"
        >
          {createUserMutation.isPending ? "Creating..." : "Create User"}
        </Button>
        <Button variant="secondary" asChild>
          <Link
            href="."
            className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
          >
            Cancel
          </Link>
        </Button>
      </div>
    </form>
  );
}


============================================================
FILE: app/(dashboard)/admin/users/_components/UsersTable.jsx
============================================================
"use client";

import { useState, useEffect } from "react";
import { authClient } from "@/lib/auth-client";
import { useRouter } from "next/navigation";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import {
  banUser,
  getUsers,
  removeUser,
  unbanUser,
  updateUserRole,
} from "@/requests/users";
import { toast } from "sonner";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Empty,
  EmptyContent,
  EmptyHeader,
  EmptyTitle,
} from "@/components/ui/empty";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Trash2 } from "lucide-react";
import { Spinner } from "@/components/ui/spinner";
import { Skeleton } from "@/components/ui/skeleton";

export default function UsersTable() {
  const router = useRouter();
  const { data: session, isPending } = authClient.useSession();
  const queryClient = useQueryClient();
  const [searchInput, setSearchInput] = useState("");
  const [debouncedSearch, setDebouncedSearch] = useState("");

  const [dialog, setDialog] = useState({
    type: null,
    open: false,
    user: null,
    newRole: null,
    reason: "",
  });
  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedSearch(searchInput);
    }, 1000);
    return () => clearTimeout(timer);
  }, [searchInput]);
  useEffect(() => {
    if (!isPending) {
      if (!session) {
        toast.warning("Your session is expired!");
        router.push("/signin");
      } else if (session?.user?.role !== "admin") {
        toast.warning("You're not authorized to access this route!");
        router.push("/dashboard");
      }
    }
  }, [session, isPending, router]);
  const { data: users = [], isLoading } = useQuery({
    queryKey: ["users", debouncedSearch],
    queryFn: () => getUsers(debouncedSearch),
    onError: (error) => toast.error(error.message),
    enabled: !!session && session?.user?.role === "admin",
  });
  const queryInvalidate = () => queryClient.invalidateQueries(["users"]);
  const setRoleMutation = useMutation({
    mutationFn: updateUserRole,
    onSuccess: () => {
      queryInvalidate();
      toast.success("The user's role has been changed");
    },
    onError: (e) => toast.error(e.message),
  });
  const banUserMutation = useMutation({
    mutationFn: banUser,
    onSuccess: () => {
      queryInvalidate();
      toast.success("The user has been banned!");
    },
    onError: (error) => toast.error(error.message),
  });
  const unbanUserMutation = useMutation({
    mutationFn: unbanUser,
    onSuccess: () => {
      queryInvalidate();
      toast.success("The user has been unbanned");
    },
    onError: (error) => toast.error(error.message),
  });
  const removeUserMutation = useMutation({
    mutationFn: removeUser,
    onSuccess: () => {
      queryInvalidate();
      toast.success("The user has been removed!");
    },
    onError: (error) => toast.error(error.message),
  });
  const handleOpenDialog = (type, user, extra = {}) => {
    setDialog({
      type,
      open: true,
      user,
      newRole: extra.newRole || null,
      reason: "",
    });
  };
  const handleConfirmDialog = () => {
    const { type, user, newRole, reason } = dialog;
    if (!user) return;
    switch (type) {
      case "role":
        setRoleMutation.mutate({ userId: user.id, role: newRole });
        break;
      case "ban":
        banUserMutation.mutate({ userId: user.id, banReason: reason });
        break;
      case "unban":
        unbanUserMutation.mutate(user.id);
        break;
      case "remove":
        removeUserMutation.mutate(user.id);
        break;
    }
    setDialog({ ...dialog, open: false });
  };
  const handleCancelDialog = () => {
    setDialog({ ...dialog, open: false, reason: "" });
  };
  if (isPending) return <Spinner />;
  if (session?.user?.role !== "admin") return null;
  return (
    <>
      <div className="mb-4">
        <Input
          type="text"
          placeholder="Search users by email..."
          value={searchInput}
          onChange={(e) => setSearchInput(e.target.value)}
        />
      </div>
      {isLoading ? (
        <div className="grid gap-6">
          <div className="flex gap-4 justify-between items-center">
            <Skeleton className="h-[20px] w-[200px] rounded-full" />
            <Skeleton className="h-[20px] w-[200px] rounded-full" />
            <Skeleton className="h-[20px] w-[200px] rounded-full" />
            <Skeleton className="h-[20px] w-[200px] rounded-full" />
          </div>
          <div className="flex gap-4 justify-between items-center">
            <Skeleton className="h-[20px] w-[200px] rounded-full" />
            <Skeleton className="h-[20px] w-[200px] rounded-full" />
            <Skeleton className="h-[20px] w-[200px] rounded-full" />
            <Skeleton className="h-[20px] w-[200px] rounded-full" />
          </div>
        </div>
      ) : users.length === 0 ? (
        <Empty className="from-muted/50 to-background h-full bg-gradient-to-b from-30%">
          <EmptyHeader>
            <EmptyTitle>No found users</EmptyTitle>
          </EmptyHeader>
          <EmptyContent>
            {debouncedSearch && "There is no results matching your search."}
          </EmptyContent>
        </Empty>
      ) : (
        <Table>
          <TableHeader>
            <TableRow className="bg-slate-100">
              {["Name", "Email", "Role", "Status", "Actions"].map((col) => (
                <TableHead key={col} className="font-bold pointer-events-none">
                  {col}
                </TableHead>
              ))}
            </TableRow>
          </TableHeader>
          <TableBody>
            {users.map((user) => (
              <TableRow key={user.id}>
                <TableCell>{user.name}</TableCell>
                <TableCell>{user.email}</TableCell>
                <TableCell>
                  <Select
                    value={user.role || "user"}
                    onValueChange={(value) =>
                      handleOpenDialog("role", user, { newRole: value })
                    }
                    disabled={setRoleMutation.isPending}
                  >
                    <SelectTrigger className="cursor-pointer disabled:opacity-50 disabled:cursor-not-allowed">
                      <SelectValue placeholder="Select user's role" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="admin">Admin</SelectItem>
                      <SelectItem value="user">User</SelectItem>
                    </SelectContent>
                  </Select>
                </TableCell>
                <TableCell>
                  {user.banned ? (
                    <Badge
                      variant="destructive"
                      className="bg-red-100 text-red-700"
                    >
                      Banned
                    </Badge>
                  ) : user.emailVerified ? (
                    <Badge
                      variant="secondary"
                      className="bg-green-100 text-green-700"
                    >
                      Active
                    </Badge>
                  ) : (
                    <Badge
                      variant="secondary"
                      className="bg-yellow-100 text-yellow-800"
                    >
                      Not Verified
                    </Badge>
                  )}
                </TableCell>
                <TableCell className="flex gap-2 items-center">
                  {user.banned ? (
                    <Button
                      variant="outline"
                      className="cursor-pointer text-green-600 hover:text-green-700"
                      disabled={
                        unbanUserMutation.isPending ||
                        session.user.id === user.id
                      }
                      onClick={() => handleOpenDialog("unban", user)}
                    >
                      Unban
                    </Button>
                  ) : (
                    <Button
                      variant="outline"
                      className="cursor-pointer text-red-500 hover:text-red-600"
                      disabled={
                        banUserMutation.isPending || session.user.id === user.id
                      }
                      onClick={() => handleOpenDialog("ban", user)}
                    >
                      Ban
                    </Button>
                  )}
                  <Button
                    variant="outline"
                    className="cursor-pointer"
                    disabled={
                      removeUserMutation.isPending ||
                      session.user.id === user.id
                    }
                    onClick={() => handleOpenDialog("remove", user)}
                  >
                    <Trash2 className="text-red-500" />
                  </Button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      )}
      <Dialog
        open={dialog.open}
        onOpenChange={(open) => setDialog({ ...dialog, open })}
      >
        <DialogContent>
          <DialogHeader>
            <DialogTitle>
              {dialog.type === "role" && "Change User Role"}
              {dialog.type === "ban" && "Ban User"}
              {dialog.type === "unban" && "Unban User"}
              {dialog.type === "remove" && "Remove User"}
            </DialogTitle>
            <DialogDescription>
              {dialog.type === "role" &&
                `Are you sure you want to change ${
                  dialog.user?.name
                }'s role to ${dialog.newRole?.toUpperCase()}?`}
              {dialog.type === "ban" &&
                `Provide a reason to ban ${dialog.user?.name}.`}
              {dialog.type === "unban" &&
                `Are you sure you want to unban ${dialog.user?.name}?`}
              {dialog.type === "remove" &&
                `Are you sure you want to permanently remove ${dialog.user?.name}?`}
            </DialogDescription>
          </DialogHeader>
          {dialog.type === "ban" && (
            <div className="my-4">
              <Input
                placeholder="Enter ban reason"
                value={dialog.reason}
                onChange={(e) =>
                  setDialog({ ...dialog, reason: e.target.value })
                }
              />
            </div>
          )}
          <DialogFooter>
            <Button variant="outline" onClick={handleCancelDialog}>
              Cancel
            </Button>
            <Button
              onClick={handleConfirmDialog}
              disabled={
                banUserMutation.isPending ||
                unbanUserMutation.isPending ||
                removeUserMutation.isPending ||
                setRoleMutation.isPending
              }
            >
              Confirm
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
}


============================================================
FILE: app/(dashboard)/admin/users/_components/UsersWrapper.jsx
============================================================
import { Button } from "@/components/ui/button";
import Link from "next/link";

export default function UsersWrapper({ children }) {
  return (
    <div className="min-h-screen bg-gray-50">
      <main className="max-w-7xl mx-auto px-4 py-8 space-y-8">
        <div className="bg-white rounded-lg shadow p-6">
          <div className="max-w-7xl mx-auto py-4 flex justify-between items-center">
            <h1 className="text-2xl font-bold">User Management</h1>
            <Link href="/dashboard" className="text-blue-600 hover:underline">
              Back to Dashboard
            </Link>
          </div>
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-xl font-semibold">Users</h2>
            <Button className="cursor-pointer" asChild>
              <Link href="users/create">Add user</Link>
            </Button>
          </div>
          {children}
        </div>
      </main>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/admin/users/create/page.js
============================================================
import UserForm from "../_components/UserForm";

export default function CreateUserPage() {
  return (
    <div className="min-h-screen bg-gray-50 flex justify-center items-center">
      <div className="max-w-3xl w-full bg-white shadow rounded-lg p-8">
        <h1 className="text-2xl font-bold mb-6">Create New User</h1>
        <UserForm />
      </div>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/admin/users/layout.js
============================================================
import UsersWrapper from "./_components/UsersWrapper";

export default function UsersLayout({ children }) {
  return <UsersWrapper>{children}</UsersWrapper>;
}


============================================================
FILE: app/(dashboard)/admin/users/page.js
============================================================
import UsersTable from "./_components/UsersTable";

export default function UsersPage() {
  return <UsersTable />;
}


============================================================
FILE: app/(dashboard)/dashboard/_components/AdminControls.jsx
============================================================
export default function AdminControls() {
  const links = [
    {
      href: "/admin/users",
      color: "blue",
      icon: "👥",
      title: "User Management",
      desc: "Manage users and roles",
    },
    {
      href: "/admin/projects",
      color: "green",
      icon: "🚀",
      title: "Projects",
      desc: "Manage projects",
    },
    {
      href: "/admin/universities",
      color: "purple",
      icon: "🎓",
      title: "Universities",
      desc: "Manage universities",
    },
    {
      href: "/admin/courses",
      color: "yellow",
      icon: "📚",
      title: "Courses",
      desc: "Manage courses",
    },
    {
      href: "/admin/messages",
      color: "red",
      icon: "✉️",
      title: "Messages",
      desc: "View contact messages",
    },
  ];

  return (
    <div className="bg-white rounded-lg shadow p-6 mb-6">
      <h3 className="text-lg font-semibold mb-4">🔐 Admin Controls</h3>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {links.map((link) => (
          <a
            key={link.href}
            href={link.href}
            className={`p-4 border-2 border-${link.color}-200 rounded hover:border-${link.color}-400 hover:bg-${link.color}-50 transition`}
          >
            <h4 className={`font-semibold text-${link.color}-700 mb-2`}>
              {link.icon} {link.title}
            </h4>
            <p className="text-sm text-gray-600">{link.desc}</p>
          </a>
        ))}
      </div>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/dashboard/_components/CourseTab.jsx
============================================================
import { formatDate } from "@/utils/formatDate";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  CardFooter,
} from "@/components/ui/card";

export default function CourseTab({ data = [], loading, isAdmin }) {
  if (loading) return <p>Loading courses...</p>;
  if (!data?.length) return <p className="text-gray-500">No courses found.</p>;

  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-semibold">Courses & Certifications</h3>
        {isAdmin && (
          <a
            href="/admin/courses"
            className="text-sm text-blue-600 hover:underline"
          >
            Manage Courses →
          </a>
        )}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {data.map((course) => (
          <Card key={course._id} className="hover:shadow-md transition">
            <CardHeader className="flex items-start gap-3 p-4">
              <img
                src={course.logo}
                alt={course.title}
                className="w-12 h-12 object-contain"
              />
              <div className="flex-1">
                <CardTitle>{course.title}</CardTitle>
                <CardDescription>{course.by}</CardDescription>
              </div>
            </CardHeader>

            <CardContent className="pt-0 px-4">
              <div className="mt-2 flex items-center gap-3 text-sm text-gray-600">
                <span>
                  Grade:{" "}
                  <span className="font-medium text-green-600">
                    {course.grade}
                  </span>
                </span>
                <span>{formatDate(course.earnedAt)}</span>
              </div>

              <div className="flex flex-wrap gap-2 mt-3">
                {course.skills.map((skill, idx) => (
                  <span
                    key={idx}
                    className="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded"
                  >
                    {skill}
                  </span>
                ))}
              </div>
            </CardContent>

            <CardFooter className="px-4 pt-0">
              <a
                href={course.credential}
                target="_blank"
                rel="noopener noreferrer"
                className="text-sm text-blue-600 hover:underline"
              >
                🏆 View Credential
              </a>
            </CardFooter>
          </Card>
        ))}
      </div>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/dashboard/_components/DashboardClient.jsx
============================================================
"use client";

import { useState, useEffect } from "react";
import { authClient } from "@/lib/auth-client";
import { useRouter } from "next/navigation";
import { useQuery } from "@tanstack/react-query";
import apiClient from "@/lib/api-client";
import DashboardHeader from "./DashboardHeader";
import AdminControls from "./AdminControls";
import DashboardTabs from "./DashboardTabs";
import { Spinner } from "@/components/ui/spinner";
import { toast } from "sonner";

export default function DashboardClient() {
  const router = useRouter();
  const { data: session, isPending } = authClient.useSession();
  const [activeTab, setActiveTab] = useState("projects");

  const isAdmin = session?.user?.role === "admin";

  useEffect(() => {
    if (!isPending && !session) {
      toast.warning("Your session is expired!");
      router.push("/signin");
    }
  }, [session, isPending, router]);

  const { data: projects, isLoading: projectsLoading } = useQuery({
    queryKey: ["projects"],
    queryFn: async () => {
      const { data } = await apiClient.get("/project");
      return data.contents || [];
    },
    enabled: !!session,
  });

  const { data: universities, isLoading: universitiesLoading } = useQuery({
    queryKey: ["universities"],
    queryFn: async () => {
      const { data } = await apiClient.get("/education/university");
      return data.contents || [];
    },
    enabled: !!session,
  });

  const { data: courses, isLoading: coursesLoading } = useQuery({
    queryKey: ["courses"],
    queryFn: async () => {
      const { data } = await apiClient.get("/education/course");
      return data.contents || [];
    },
    enabled: !!session,
  });
  if (isPending) {
    return <Spinner />;
  }
  if (!session) return null;
  return (
    <div className="min-h-screen bg-gray-50">
      <DashboardHeader session={session} />
      <main className="max-w-7xl mx-auto px-4 py-8">
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <h2 className="text-xl font-semibold mb-4">
            Welcome, {session?.user?.name}!
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="p-4 bg-blue-50 rounded">
              <p className="text-sm text-gray-600">Email</p>
              <p className="font-medium">{session?.user?.email}</p>
            </div>
            <div className="p-4 bg-green-50 rounded">
              <p className="text-sm text-gray-600">Role</p>
              <p className="font-medium capitalize">{session?.user?.role}</p>
            </div>
            <div className="p-4 bg-purple-50 rounded">
              <p className="text-sm text-gray-600">Status</p>
              <p className="font-medium">
                {session?.user?.emailVerified ? "Verified" : "Unverified"}
              </p>
            </div>
          </div>
        </div>

        {isAdmin && <AdminControls />}

        <DashboardTabs
          activeTab={activeTab}
          setActiveTab={setActiveTab}
          isAdmin={isAdmin}
          data={{ projects, universities, courses }}
          loading={{
            projectsLoading,
            universitiesLoading,
            coursesLoading,
          }}
        />
      </main>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/dashboard/_components/DashboardHeader.jsx
============================================================
import { Button } from "@/components/ui/button";
import { authClient } from "@/lib/auth-client";
import Link from "next/link";

export default function DashboardHeader({ session }) {
  return (
    <nav className="bg-white shadow">
      <div className="max-w-7xl mx-auto p-4 flex justify-between items-center">
        <h1 className="text-2xl font-bold">Dashboard</h1>
        <div className="flex items-center gap-4">
          <Link href="/" className="text-blue-600 hover:underline">
            Home
          </Link>
          <Link href="/profile" className="text-blue-600 hover:underline">
            Profile
          </Link>
          <span className="text-sm text-gray-600">
            {session?.user?.name} ({session?.user?.role})
          </span>
          <Button
            variant="destructive"
            onClick={async () => await authClient.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </div>
    </nav>
  );
}


============================================================
FILE: app/(dashboard)/dashboard/_components/DashboardTabs.jsx
============================================================
import ProjectTab from "./ProjectTab";
import UniversityTab from "./UniversityTab";
import CourseTab from "./CourseTab";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

export default function DashboardTabs({
  activeTab,
  setActiveTab,
  isAdmin,
  data,
  loading,
}) {
  return (
    <Tabs defaultValue="projects" className="bg-white rounded-lg shadow p-6">
      <TabsList>
        {["projects", "universities", "courses"].map((tab) => (
          <TabsTrigger key={tab} value={tab} className="cursor-pointer">
            {tab === "projects" && `Projects (${data.projects?.length || 0})`}
            {tab === "universities" &&
              `Universities (${data.universities?.length || 0})`}
            {tab === "courses" && `Courses (${data.courses?.length || 0})`}
          </TabsTrigger>
        ))}
      </TabsList>
      <TabsContent value="projects">
        <ProjectTab
          data={data.projects}
          loading={loading.projectsLoading}
          isAdmin={isAdmin}
        />
      </TabsContent>
      <TabsContent value="universities">
        <UniversityTab
          data={data.universities}
          loading={loading.universitiesLoading}
          isAdmin={isAdmin}
        />
      </TabsContent>
      <TabsContent value="courses">
        <CourseTab
          data={data.courses}
          loading={loading.coursesLoading}
          isAdmin={isAdmin}
        />
      </TabsContent>
    </Tabs>
  );
}


============================================================
FILE: app/(dashboard)/dashboard/_components/ProjectTab.jsx
============================================================
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  CardFooter,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import Image from "next/image";
import Link from "next/link";
import { Button } from "@/components/ui/button";

export default function ProjectTab({ data = [], loading, isAdmin }) {
  if (loading) return <p>Loading projects...</p>;
  if (!data?.length) return <p className="text-gray-500">No projects found.</p>;

  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-semibold">All Projects</h3>
        {isAdmin && (
          <Link
            href="/admin/projects"
            className="text-sm text-blue-600 hover:underline"
          >
            Manage Projects
          </Link>
        )}
      </div>
      <div className="grid md:grid-cols-3 gap-4">
        {data.map(({ _id, preview, title, summary, tools, demo, code }) => (
          <Card
            key={_id}
            className="overflow-hidden hover:shadow-lg transition pt-0"
          >
            <Image
              src={preview}
              alt={`${title} preview`}
              width={600}
              height={400}
              className="object-cover"
              unoptimized
            />
            <CardHeader>
              <CardTitle className="text-2xl font-bold">{title}</CardTitle>
              <CardDescription>{summary}</CardDescription>
            </CardHeader>
            <CardContent className="flex flex-wrap gap-2">
              {tools.map((tool) => (
                <Badge
                  variant="secondary"
                  className="bg-blue-100 text-blue-700"
                  key={tool}
                >
                  {tool}
                </Badge>
              ))}
            </CardContent>
            <CardFooter className="flex gap-3">
              <Button>
                <a href={demo} target="_blank" rel="noopener noreferrer">
                  Live Demo
                </a>
              </Button>
              <Button variant="outline">
                <a href={code} target="_blank" rel="noopener noreferrer">
                  Source Code
                </a>
              </Button>
            </CardFooter>
          </Card>
        ))}
      </div>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/dashboard/_components/UniversityTab.jsx
============================================================
import { formatDate } from "@/utils/formatDate";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
} from "@/components/ui/card";
import Link from "next/link";

export default function UniversityTab({ data = [], loading, isAdmin }) {
  if (loading) return <p>Loading universities...</p>;
  if (!data?.length)
    return <p className="text-gray-500">No universities found.</p>;
  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-semibold">Universities</h3>
        {isAdmin && (
          <Link
            href="/admin/universities"
            className="text-sm text-blue-600 hover:underline"
          >
            Manage Universities
          </Link>
        )}
      </div>

      <div className="grid md:grid-cols-2 gap-4">
        {data.map((university) => (
          <Card key={university._id} className="hover:shadow-md transition">
            <CardHeader className="flex items-start gap-4 p-5">
              <img
                src={university.logo}
                alt={university.title}
                className="w-16 h-16 object-contain"
              />
              <div className="flex-1">
                <div className="flex items-start justify-between">
                  <div>
                    <CardTitle>{university.title}</CardTitle>
                    <CardDescription>{university.by}</CardDescription>
                  </div>
                  <span
                    className={`px-3 py-1 rounded text-sm ${
                      university.status === "graduated"
                        ? "bg-green-100 text-green-800"
                        : "bg-yellow-100 text-yellow-800"
                    }`}
                  >
                    {university.status === "graduated"
                      ? "✓ Graduated"
                      : "📚 In Progress"}
                  </span>
                </div>
              </div>
            </CardHeader>

            <CardContent className="pt-0 px-5">
              <div className="text-sm text-gray-600">
                {university.status === "graduated" ? (
                  <p>Graduated: {formatDate(university.graduatedAt)}</p>
                ) : (
                  <p>Started: {formatDate(university.startedAt)}</p>
                )}
                {university.grade && <p>Grade: {university.grade}</p>}
              </div>

              {university.skills?.length > 0 && (
                <div className="flex flex-wrap gap-2 mt-3">
                  {university.skills.map((skill, idx) => (
                    <span
                      key={idx}
                      className="px-2 py-1 bg-purple-100 text-purple-700 text-xs rounded"
                    >
                      {skill}
                    </span>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}


============================================================
FILE: app/(dashboard)/dashboard/page.js
============================================================
import DashboardClient from "./_components/DashboardClient";

export default async function DashboardPage() {
  return <DashboardClient />;
}


============================================================
FILE: app/(dashboard)/profile/_components/validation/schema.js
============================================================
import * as Yup from "yup";

export const schema = Yup.object({
  currentPassword: Yup.string().required("Current password is required"),
  newPassword: Yup.string()
    .min(8, "Must be at least 8 characters")
    .required("New password is required"),
  confirmPassword: Yup.string()
    .oneOf([Yup.ref("newPassword")], "Passwords do not match")
    .required("Please confirm your new password"),
});


============================================================
FILE: app/(dashboard)/profile/_components/ProfileClient.jsx
============================================================
"use client";

import { authClient } from "@/lib/auth-client";
import { useRouter } from "next/navigation";
import { useEffect } from "react";
import { useMutation } from "@tanstack/react-query";
import { useFormik } from "formik";
import * as Yup from "yup";
import { changePassword } from "@/requests/auth";
import { schema } from "./validation/schema";

export default function ProfileClient() {
  const router = useRouter();
  const { data: session, isPending } = authClient.useSession();
  useEffect(() => {
    if (!isPending && !session) {
      router.push("/signin");
    }
  }, [session, isPending, router]);
  const {
    mutateAsync,
    isPending: passwordPending,
    isSuccess,
    isError,
    error,
    reset,
  } = useMutation({
    mutationFn: (values) => changePassword(values),
    onSuccess: () => setTimeout(() => reset(), 2500),
  });
  const { handleSubmit, getFieldProps, touched, errors, isValid } = useFormik({
    initialValues: {
      currentPassword: "",
      newPassword: "",
      confirmPassword: "",
    },
    validationSchema: schema,
    onSubmit: (values, { resetForm }) => {
      mutateAsync(values);
      resetForm();
    },
  });
  if (isPending) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-xl">Loading...</div>
      </div>
    );
  }
  if (!session) return null;
  return (
    <>
      {/* --- Navbar --- */}
      {/* <nav className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 py-4 flex justify-between items-center">
          <h1 className="text-2xl font-bold">Profile</h1>
          <div className="flex items-center gap-4">
            <a href="/" className="text-blue-600 hover:underline">
              Home
            </a>
            <a href="/dashboard" className="text-blue-600 hover:underline">
              Dashboard
            </a>
            <a href="/contact" className="text-blue-600 hover:underline">
              Contact
            </a>
          </div>
        </div>
      </nav> */}
      <main className="max-w-3xl mx-auto px-4 py-8">
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <h2 className="text-xl font-semibold mb-4">Account Information</h2>
          <div className="space-y-3">
            <div>
              <label className="text-sm text-gray-600">Name</label>
              <p className="font-medium">{session.user.name}</p>
            </div>
            <div>
              <label className="text-sm text-gray-600">Email</label>
              <p className="font-medium">{session.user.email}</p>
            </div>
            <div>
              <label className="text-sm text-gray-600">Role</label>
              <p className="font-medium capitalize">{session.user.role}</p>
            </div>
            <div>
              <label className="text-sm text-gray-600">Email Verified</label>
              <p className="font-medium">
                {session.user.emailVerified ? (
                  <span className="text-green-600">✓ Yes</span>
                ) : (
                  <span className="text-amber-600">⚠ No</span>
                )}
              </p>
            </div>
          </div>
        </div>
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-xl font-semibold mb-4">Change Password</h2>
          {isSuccess && (
            <div className="bg-green-50 text-green-600 p-3 rounded mb-4 flex items-start gap-2">
              <span className="text-xl">✓</span>
              <div>
                <p className="font-medium">Password changed successfully!</p>
                <p className="text-sm">
                  All other sessions have been logged out for security.
                </p>
              </div>
            </div>
          )}
          {isError && (
            <div className="bg-red-50 text-red-600 p-3 rounded mb-4">
              {error?.message}
            </div>
          )}
          <div className="my-6 p-4 bg-blue-50 rounded text-sm text-blue-800">
            <p className="font-medium mb-1">🔒 Security Note</p>
            <p>
              Changing your password will log you out of all other devices for
              security. You'll need to sign in again on those devices.
            </p>
          </div>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-1">
                Current Password
              </label>
              <input
                type="password"
                {...getFieldProps("currentPassword")}
                className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
                placeholder="Enter current password"
                disabled={passwordPending}
              />
              {touched.currentPassword && errors.currentPassword && (
                <p className="text-red-600 text-sm mt-1">
                  {errors.currentPassword}
                </p>
              )}
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">
                New Password
              </label>
              <input
                type="password"
                {...getFieldProps("newPassword")}
                className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
                placeholder="Enter new password"
                disabled={passwordPending}
              />
              <p className="text-xs text-gray-500 mt-1">
                Must be at least 8 characters
              </p>
              {touched.newPassword && errors.newPassword && (
                <p className="text-red-600 text-sm mt-1">
                  {errors.newPassword}
                </p>
              )}
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">
                Confirm New Password
              </label>
              <input
                type="password"
                {...getFieldProps("confirmPassword")}
                className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
                placeholder="Confirm new password"
                disabled={passwordPending}
              />
              {touched.confirmPassword && errors.confirmPassword && (
                <p className="text-red-600 text-sm mt-1">
                  {errors.confirmPassword}
                </p>
              )}
            </div>

            <button
              type="submit"
              disabled={passwordPending || !isValid}
              className="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700 disabled:opacity-50 transition"
            >
              {passwordPending ? "Changing..." : "Change Password"}
            </button>
          </form>
        </div>
      </main>
    </>
  );
}


============================================================
FILE: app/(dashboard)/profile/page.js
============================================================
import ProfileClient from "./_components/ProfileClient";

export default async function ProfilePage() {
  return (
    <main className="min-h-screen bg-gray-50">
      <ProfileClient />
    </main>
  );
}


============================================================
FILE: app/globals.css
============================================================
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}


============================================================
FILE: app/layout.js
============================================================
import { Toaster } from "sonner";
import Providers from "./providers";
import { Open_Sans } from "next/font/google";
import "./globals.css";

const openSans = Open_Sans({
  subsets: ["latin"],
  weight: ["400", "600", "700"],
  display: "swap",
});

export const metadata = {
  title: "Better Auth App",
  description: "Full-stack authentication with Better Auth",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={`${openSans.className} antialiased`}>
        <Toaster position="top-center" />
        <Providers>{children}</Providers>
      </body>
    </html>
  );
}


============================================================
FILE: app/page.js
============================================================
"use client";

import { authClient } from "@/lib/auth-client";
import Link from "next/link";
import { useRouter } from "next/navigation";

export default function HomePage() {
  const { data: session, isPending } = authClient.useSession();
  const router = useRouter();

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      <nav className="bg-white/80 backdrop-blur-sm shadow-sm sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center">
              <h1 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                Portfolio Dashboard
              </h1>
            </div>
            <div className="flex items-center gap-4">
              {isPending ? (
                <div className="text-sm text-gray-500">Loading...</div>
              ) : session ? (
                <>
                  <Link
                    href="/dashboard"
                    className="text-gray-700 hover:text-blue-600 transition"
                  >
                    Dashboard
                  </Link>
                  <Link
                    href="/profile"
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"
                  >
                    Profile
                  </Link>
                </>
              ) : (
                <>
                  <Link
                    href="/signin"
                    className="text-gray-700 hover:text-blue-600 transition"
                  >
                    Sign In
                  </Link>
                  <Link
                    href="/signup"
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"
                  >
                    Get Started
                  </Link>
                </>
              )}
            </div>
          </div>
        </div>
      </nav>

      {/* Hero Section */}
      <section className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-20 pb-16">
        <div className="text-center">
          <h1 className="text-5xl sm:text-6xl lg:text-7xl font-bold text-gray-900 mb-6">
            Manage Your{" "}
            <span className="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              Portfolio
            </span>
            <br />
            with Ease
          </h1>
          <p className="text-xl text-gray-600 mb-8 max-w-3xl mx-auto">
            A comprehensive dashboard to manage your projects, education,
            courses, and connect with your audience. Everything you need in one
            place.
          </p>
          <div className="flex gap-4 justify-center">
            {session ? (
              <button
                onClick={() => router.push("/dashboard")}
                className="px-8 py-4 bg-blue-600 text-white rounded-lg text-lg font-semibold hover:bg-blue-700 transition shadow-lg hover:shadow-xl"
              >
                Go to Dashboard
              </button>
            ) : (
              <>
                <Link
                  href="/signup"
                  className="px-8 py-4 bg-blue-600 text-white rounded-lg text-lg font-semibold hover:bg-blue-700 transition shadow-lg hover:shadow-xl"
                >
                  Get Started Free
                </Link>
                <Link
                  href="/signin"
                  className="px-8 py-4 bg-white text-blue-600 border-2 border-blue-600 rounded-lg text-lg font-semibold hover:bg-blue-50 transition"
                >
                  Sign In
                </Link>
              </>
            )}
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20">
        <h2 className="text-3xl font-bold text-center mb-12">
          Everything You Need
        </h2>
        <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
          <div className="bg-white p-6 rounded-xl shadow-lg hover:shadow-xl transition">
            <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mb-4">
              <span className="text-2xl">🚀</span>
            </div>
            <h3 className="text-xl font-semibold mb-2">Project Management</h3>
            <p className="text-gray-600">
              Showcase your projects with detailed descriptions, tools used, and
              live demos.
            </p>
          </div>

          <div className="bg-white p-6 rounded-xl shadow-lg hover:shadow-xl transition">
            <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mb-4">
              <span className="text-2xl">🎓</span>
            </div>
            <h3 className="text-xl font-semibold mb-2">Education Tracking</h3>
            <p className="text-gray-600">
              Keep track of your universities and academic achievements with
              ease.
            </p>
          </div>

          <div className="bg-white p-6 rounded-xl shadow-lg hover:shadow-xl transition">
            <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mb-4">
              <span className="text-2xl">📚</span>
            </div>
            <h3 className="text-xl font-semibold mb-2">Course Certificates</h3>
            <p className="text-gray-600">
              Display your certifications and skills acquired from online
              courses.
            </p>
          </div>

          <div className="bg-white p-6 rounded-xl shadow-lg hover:shadow-xl transition">
            <div className="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center mb-4">
              <span className="text-2xl">✉️</span>
            </div>
            <h3 className="text-xl font-semibold mb-2">Contact Management</h3>
            <p className="text-gray-600">
              Receive and manage messages from visitors and potential clients.
            </p>
          </div>
        </div>
      </section>

      {/* Admin Features (if logged in as admin) */}
      {session?.user?.role === "admin" && (
        <section className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20 bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold mb-4">Admin Features</h2>
            <p className="text-gray-600">Powerful tools for administrators</p>
          </div>
          <div className="grid md:grid-cols-3 gap-6 max-w-4xl mx-auto">
            <div className="bg-white p-6 rounded-lg shadow">
              <span className="text-3xl mb-2 block">👥</span>
              <h3 className="font-semibold mb-2">User Management</h3>
              <p className="text-sm text-gray-600">
                Manage users, assign roles, and control access
              </p>
            </div>
            <div className="bg-white p-6 rounded-lg shadow">
              <span className="text-3xl mb-2 block">📝</span>
              <h3 className="font-semibold mb-2">Content Control</h3>
              <p className="text-sm text-gray-600">
                Full CRUD operations for all content types
              </p>
            </div>
            <div className="bg-white p-6 rounded-lg shadow">
              <span className="text-3xl mb-2 block">📊</span>
              <h3 className="font-semibold mb-2">Message Inbox</h3>
              <p className="text-sm text-gray-600">
                View and respond to all contact messages
              </p>
            </div>
          </div>
        </section>
      )}

      {/* CTA Section */}
      {!session && (
        <section className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20">
          <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl p-12 text-center text-white">
            <h2 className="text-4xl font-bold mb-4">Ready to Get Started?</h2>
            <p className="text-xl mb-8 opacity-90">
              Join now and start managing your portfolio professionally
            </p>
            <Link
              href="/signup"
              className="inline-block px-8 py-4 bg-white text-blue-600 rounded-lg text-lg font-semibold hover:bg-gray-100 transition shadow-lg"
            >
              Create Free Account
            </Link>
          </div>
        </section>
      )}

      {/* Footer */}
      <footer className="bg-gray-900 text-white py-12 mt-20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid md:grid-cols-3 gap-8">
            <div>
              <h3 className="text-xl font-bold mb-4">Portfolio Dashboard</h3>
              <p className="text-gray-400">
                Your all-in-one solution for managing your professional
                portfolio and connecting with your audience.
              </p>
            </div>
            <div>
              <h4 className="font-semibold mb-4">Quick Links</h4>
              <ul className="space-y-2 text-gray-400">
                {session ? (
                  <>
                    <li>
                      <Link href="/dashboard" className="hover:text-white">
                        Dashboard
                      </Link>
                    </li>
                    <li>
                      <Link href="/profile" className="hover:text-white">
                        Profile
                      </Link>
                    </li>
                    <li>
                      <Link href="/contact" className="hover:text-white">
                        Contact
                      </Link>
                    </li>
                  </>
                ) : (
                  <>
                    <li>
                      <Link href="/signin" className="hover:text-white">
                        Sign In
                      </Link>
                    </li>
                    <li>
                      <Link href="/signup" className="hover:text-white">
                        Sign Up
                      </Link>
                    </li>
                  </>
                )}
              </ul>
            </div>
            <div>
              <h4 className="font-semibold mb-4">Features</h4>
              <ul className="space-y-2 text-gray-400">
                <li>Project Management</li>
                <li>Education Tracking</li>
                <li>Course Certificates</li>
                <li>Contact Management</li>
              </ul>
            </div>
          </div>
          <div className="border-t border-gray-800 mt-8 pt-8 text-center text-gray-400">
            <p>
              &copy; {new Date().getFullYear()} Portfolio Dashboard. All rights
              reserved.
            </p>
          </div>
        </div>
      </footer>
    </div>
  );
}


============================================================
FILE: app/providers.js
============================================================
"use client";

import { QueryClient, QueryClientProvider } from "@tanstack/react-query";

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 60 * 1000,
    },
  },
});
export default function Providers({ children }) {
  return (
    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
  );
}


============================================================
FILE: components/ui/badge.jsx
============================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-full border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props} />
  );
}

export { Badge, badgeVariants }


============================================================
FILE: components/ui/button.jsx
============================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
        "icon-sm": "size-8",
        "icon-lg": "size-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props} />
  );
}

export { Button, buttonVariants }


============================================================
FILE: components/ui/card.jsx
============================================================
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({
  className,
  ...props
}) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props} />
  );
}

function CardHeader({
  className,
  ...props
}) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-2 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props} />
  );
}

function CardTitle({
  className,
  ...props
}) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props} />
  );
}

function CardDescription({
  className,
  ...props
}) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props} />
  );
}

function CardAction({
  className,
  ...props
}) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props} />
  );
}

function CardContent({
  className,
  ...props
}) {
  return (<div data-slot="card-content" className={cn("px-6", className)} {...props} />);
}

function CardFooter({
  className,
  ...props
}) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props} />
  );
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}


============================================================
FILE: components/ui/dialog.jsx
============================================================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />;
}

function DialogTrigger({
  ...props
}) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />;
}

function DialogPortal({
  ...props
}) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />;
}

function DialogClose({
  ...props
}) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />;
}

function DialogOverlay({
  className,
  ...props
}) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props} />
  );
}

function DialogContent({
  className,
  children,
  showCloseButton = true,
  ...props
}) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}>
        {children}
        {showCloseButton && (
          <DialogPrimitive.Close
            data-slot="dialog-close"
            className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>
  );
}

function DialogHeader({
  className,
  ...props
}) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props} />
  );
}

function DialogFooter({
  className,
  ...props
}) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn("flex flex-col-reverse gap-2 sm:flex-row sm:justify-end", className)}
      {...props} />
  );
}

function DialogTitle({
  className,
  ...props
}) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props} />
  );
}

function DialogDescription({
  className,
  ...props
}) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props} />
  );
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}


============================================================
FILE: components/ui/empty.jsx
============================================================
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

function Empty({
  className,
  ...props
}) {
  return (
    <div
      data-slot="empty"
      className={cn(
        "flex min-w-0 flex-1 flex-col items-center justify-center gap-6 rounded-lg border-dashed p-6 text-center text-balance md:p-12",
        className
      )}
      {...props} />
  );
}

function EmptyHeader({
  className,
  ...props
}) {
  return (
    <div
      data-slot="empty-header"
      className={cn("flex max-w-sm flex-col items-center gap-2 text-center", className)}
      {...props} />
  );
}

const emptyMediaVariants = cva(
  "flex shrink-0 items-center justify-center mb-2 [&_svg]:pointer-events-none [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        icon: "bg-muted text-foreground flex size-10 shrink-0 items-center justify-center rounded-lg [&_svg:not([class*='size-'])]:size-6",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function EmptyMedia({
  className,
  variant = "default",
  ...props
}) {
  return (
    <div
      data-slot="empty-icon"
      data-variant={variant}
      className={cn(emptyMediaVariants({ variant, className }))}
      {...props} />
  );
}

function EmptyTitle({
  className,
  ...props
}) {
  return (
    <div
      data-slot="empty-title"
      className={cn("text-lg font-medium tracking-tight", className)}
      {...props} />
  );
}

function EmptyDescription({
  className,
  ...props
}) {
  return (
    <div
      data-slot="empty-description"
      className={cn(
        "text-muted-foreground [&>a:hover]:text-primary text-sm/relaxed [&>a]:underline [&>a]:underline-offset-4",
        className
      )}
      {...props} />
  );
}

function EmptyContent({
  className,
  ...props
}) {
  return (
    <div
      data-slot="empty-content"
      className={cn(
        "flex w-full max-w-sm min-w-0 flex-col items-center gap-4 text-sm text-balance",
        className
      )}
      {...props} />
  );
}

export {
  Empty,
  EmptyHeader,
  EmptyTitle,
  EmptyDescription,
  EmptyContent,
  EmptyMedia,
}


============================================================
FILE: components/ui/field.jsx
============================================================
"use client"

import { useMemo } from "react"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"
import { Separator } from "@/components/ui/separator"

function FieldSet({
  className,
  ...props
}) {
  return (
    <fieldset
      data-slot="field-set"
      className={cn(
        "flex flex-col gap-6",
        "has-[>[data-slot=checkbox-group]]:gap-3 has-[>[data-slot=radio-group]]:gap-3",
        className
      )}
      {...props} />
  );
}

function FieldLegend({
  className,
  variant = "legend",
  ...props
}) {
  return (
    <legend
      data-slot="field-legend"
      data-variant={variant}
      className={cn(
        "mb-3 font-medium",
        "data-[variant=legend]:text-base",
        "data-[variant=label]:text-sm",
        className
      )}
      {...props} />
  );
}

function FieldGroup({
  className,
  ...props
}) {
  return (
    <div
      data-slot="field-group"
      className={cn(
        "group/field-group @container/field-group flex w-full flex-col gap-7 data-[slot=checkbox-group]:gap-3 [&>[data-slot=field-group]]:gap-4",
        className
      )}
      {...props} />
  );
}

const fieldVariants = cva("group/field flex w-full gap-3 data-[invalid=true]:text-destructive", {
  variants: {
    orientation: {
      vertical: ["flex-col [&>*]:w-full [&>.sr-only]:w-auto"],
      horizontal: [
        "flex-row items-center",
        "[&>[data-slot=field-label]]:flex-auto",
        "has-[>[data-slot=field-content]]:items-start has-[>[data-slot=field-content]]:[&>[role=checkbox],[role=radio]]:mt-px",
      ],
      responsive: [
        "flex-col [&>*]:w-full [&>.sr-only]:w-auto @md/field-group:flex-row @md/field-group:items-center @md/field-group:[&>*]:w-auto",
        "@md/field-group:[&>[data-slot=field-label]]:flex-auto",
        "@md/field-group:has-[>[data-slot=field-content]]:items-start @md/field-group:has-[>[data-slot=field-content]]:[&>[role=checkbox],[role=radio]]:mt-px",
      ],
    },
  },
  defaultVariants: {
    orientation: "vertical",
  },
})

function Field({
  className,
  orientation = "vertical",
  ...props
}) {
  return (
    <div
      role="group"
      data-slot="field"
      data-orientation={orientation}
      className={cn(fieldVariants({ orientation }), className)}
      {...props} />
  );
}

function FieldContent({
  className,
  ...props
}) {
  return (
    <div
      data-slot="field-content"
      className={cn("group/field-content flex flex-1 flex-col gap-1.5 leading-snug", className)}
      {...props} />
  );
}

function FieldLabel({
  className,
  ...props
}) {
  return (
    <Label
      data-slot="field-label"
      className={cn(
        "group/field-label peer/field-label flex w-fit gap-2 leading-snug group-data-[disabled=true]/field:opacity-50",
        "has-[>[data-slot=field]]:w-full has-[>[data-slot=field]]:flex-col has-[>[data-slot=field]]:rounded-md has-[>[data-slot=field]]:border [&>*]:data-[slot=field]:p-4",
        "has-data-[state=checked]:bg-primary/5 has-data-[state=checked]:border-primary dark:has-data-[state=checked]:bg-primary/10",
        className
      )}
      {...props} />
  );
}

function FieldTitle({
  className,
  ...props
}) {
  return (
    <div
      data-slot="field-label"
      className={cn(
        "flex w-fit items-center gap-2 text-sm leading-snug font-medium group-data-[disabled=true]/field:opacity-50",
        className
      )}
      {...props} />
  );
}

function FieldDescription({
  className,
  ...props
}) {
  return (
    <p
      data-slot="field-description"
      className={cn(
        "text-muted-foreground text-sm leading-normal font-normal group-has-[[data-orientation=horizontal]]/field:text-balance",
        "last:mt-0 nth-last-2:-mt-1 [[data-variant=legend]+&]:-mt-1.5",
        "[&>a:hover]:text-primary [&>a]:underline [&>a]:underline-offset-4",
        className
      )}
      {...props} />
  );
}

function FieldSeparator({
  children,
  className,
  ...props
}) {
  return (
    <div
      data-slot="field-separator"
      data-content={!!children}
      className={cn(
        "relative -my-2 h-5 text-sm group-data-[variant=outline]/field-group:-mb-2",
        className
      )}
      {...props}>
      <Separator className="absolute inset-0 top-1/2" />
      {children && (
        <span
          className="bg-background text-muted-foreground relative mx-auto block w-fit px-2"
          data-slot="field-separator-content">
          {children}
        </span>
      )}
    </div>
  );
}

function FieldError({
  className,
  children,
  errors,
  ...props
}) {
  const content = useMemo(() => {
    if (children) {
      return children
    }

    if (!errors?.length) {
      return null
    }

    const uniqueErrors = [
      ...new Map(errors.map((error) => [error?.message, error])).values(),
    ]

    if (uniqueErrors?.length == 1) {
      return uniqueErrors[0]?.message
    }

    return (
      <ul className="ml-4 flex list-disc flex-col gap-1">
        {uniqueErrors.map((error, index) =>
          error?.message && <li key={index}>{error.message}</li>)}
      </ul>
    );
  }, [children, errors])

  if (!content) {
    return null
  }

  return (
    <div
      role="alert"
      data-slot="field-error"
      className={cn("text-destructive text-sm font-normal", className)}
      {...props}>
      {content}
    </div>
  );
}

export {
  Field,
  FieldLabel,
  FieldDescription,
  FieldError,
  FieldGroup,
  FieldLegend,
  FieldSeparator,
  FieldSet,
  FieldContent,
  FieldTitle,
}


============================================================
FILE: components/ui/input.jsx
============================================================
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({
  className,
  type,
  ...props
}) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props} />
  );
}

export { Input }


============================================================
FILE: components/ui/label.jsx
============================================================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props} />
  );
}

export { Label }


============================================================
FILE: components/ui/select.jsx
============================================================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}) {
  return <SelectPrimitive.Root data-slot="select" {...props} />;
}

function SelectGroup({
  ...props
}) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />;
}

function SelectValue({
  ...props
}) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />;
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}>
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  );
}

function SelectContent({
  className,
  children,
  position = "popper",
  align = "center",
  ...props
}) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        align={align}
        {...props}>
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn("p-1", position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1")}>
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  );
}

function SelectLabel({
  className,
  ...props
}) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props} />
  );
}

function SelectItem({
  className,
  children,
  ...props
}) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}>
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  );
}

function SelectSeparator({
  className,
  ...props
}) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props} />
  );
}

function SelectScrollUpButton({
  className,
  ...props
}) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn("flex cursor-default items-center justify-center py-1", className)}
      {...props}>
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  );
}

function SelectScrollDownButton({
  className,
  ...props
}) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn("flex cursor-default items-center justify-center py-1", className)}
      {...props}>
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  );
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}


============================================================
FILE: components/ui/separator.jsx
============================================================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props} />
  );
}

export { Separator }


============================================================
FILE: components/ui/skeleton.jsx
============================================================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-accent animate-pulse rounded-md", className)}
      {...props} />
  );
}

export { Skeleton }


============================================================
FILE: components/ui/spinner.jsx
============================================================
import { Loader2Icon } from "lucide-react";
import { cn } from "@/lib/utils";

function Spinner({ className, ...props }) {
  return (
    <div className="grid place-items-center w-full min-h-screen fixed top-0 left-0">
      <Loader2Icon
        role="status"
        aria-label="Loading"
        className={cn("size-12 animate-spin", className)}
        {...props}
      />
    </div>
  );
}

export { Spinner };


============================================================
FILE: components/ui/table.jsx
============================================================
"use client"

import * as React from "react"

import { cn } from "@/lib/utils"

function Table({
  className,
  ...props
}) {
  return (
    <div data-slot="table-container" className="relative w-full overflow-x-auto">
      <table
        data-slot="table"
        className={cn("w-full caption-bottom text-sm", className)}
        {...props} />
    </div>
  );
}

function TableHeader({
  className,
  ...props
}) {
  return (
    <thead
      data-slot="table-header"
      className={cn("[&_tr]:border-b", className)}
      {...props} />
  );
}

function TableBody({
  className,
  ...props
}) {
  return (
    <tbody
      data-slot="table-body"
      className={cn("[&_tr:last-child]:border-0", className)}
      {...props} />
  );
}

function TableFooter({
  className,
  ...props
}) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn("bg-muted/50 border-t font-medium [&>tr]:last:border-b-0", className)}
      {...props} />
  );
}

function TableRow({
  className,
  ...props
}) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        "hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",
        className
      )}
      {...props} />
  );
}

function TableHead({
  className,
  ...props
}) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        "text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props} />
  );
}

function TableCell({
  className,
  ...props
}) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        "p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props} />
  );
}

function TableCaption({
  className,
  ...props
}) {
  return (
    <caption
      data-slot="table-caption"
      className={cn("text-muted-foreground mt-4 text-sm", className)}
      {...props} />
  );
}

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


============================================================
FILE: components/ui/tabs.jsx
============================================================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({
  className,
  ...props
}) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props} />
  );
}

function TabsList({
  className,
  ...props
}) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props} />
  );
}

function TabsTrigger({
  className,
  ...props
}) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props} />
  );
}

function TabsContent({
  className,
  ...props
}) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props} />
  );
}

export { Tabs, TabsList, TabsTrigger, TabsContent }


============================================================
FILE: requests/auth.js
============================================================
import { authClient } from "@/lib/auth-client";

const forgotPassword = async (email) => {
  try {
    const { data } = await authClient.requestPasswordReset({
      email,
      redirectTo: `${process.env.NEXT_PUBLIC_LOCAL_CLIENT}/reset-password`,
    });
    return data;
  } catch (error) {
    throw error;
  }
};
const resetPassword = async (newPassword, token) => {
  try {
    const { data } = await authClient.resetPassword({ newPassword, token });
    return data;
  } catch (error) {
    throw error;
  }
};
const changePassword = async (payload) => {
  try {
    const { data } = await authClient.changePassword(payload);
    return data;
  } catch (error) {
    throw error;
  }
};
const signin = async (payload) => {
  try {
    const { data, error } = await authClient.signIn.email({
      ...payload,
      callbackURL: `${process.env.NEXT_PUBLIC_LOCAL_CLIENT}/dashboard`,
    });
    if (error) {
      let errorMessage = "Failed to sign in";
      if (error.status === 403) {
        if (error.code === "BANNED_USER") {
          errorMessage = error.message || "Your account has been banned!";
        } else if (error.code === "EMAIL_NOT_VERIFIED") {
          errorMessage = "Please verify your email before signing in";
        } else {
          errorMessage = "Wrong credentials!";
        }
      } else {
        errorMessage = error.message || errorMessage;
      }
      throw new Error(errorMessage);
    }
    return data;
  } catch (error) {
    throw error;
  }
};

const signup = async (payload) => {
  try {
    const { data, error } = await authClient.signUp.email({
      ...payload,
      callbackURL: `${process.env.NEXT_PUBLIC_LOCAL_CLIENT}/signin`,
    });
    if (error) {
      let errorMessage = "Failed to sign up";
      if (
        error.status === 422 &&
        error.code === "USER_ALREADY_EXISTS_USE_ANOTHER_EMAIL"
      ) {
        errorMessage = "User already exists. Use another email.";
      } else {
        errorMessage = error.message || errorMessage;
      }
      throw new Error(errorMessage);
    }
    return data;
  } catch (error) {
    throw error;
  }
};

export { forgotPassword, resetPassword, changePassword, signin, signup };


============================================================
FILE: requests/courses.js
============================================================
import apiClient from "@/lib/api-client";

const getCourses = async () => {
  try {
    const { data } = await apiClient.get("/education/course");
    return data;
  } catch (error) {
    throw error;
  }
};
const createCourse = async (payload) => {
  try {
    const { data } = await apiClient.post("/education/course", payload);
    return data;
  } catch (error) {
    throw error;
  }
};
const getCourse = async (id) => {
  try {
    const { data } = await apiClient.get(`/education/course/${id}`);
    return data;
  } catch (error) {
    throw error;
  }
};
const updateCourse = async (id, payload) => {
  try {
    const { data } = await apiClient.patch(`/education/course/${id}`, payload);
    return data;
  } catch (error) {
    throw error;
  }
};
const removeCourse = async (id) => {
  try {
    const { data } = await apiClient.delete(`/education/course/${id}`);
    return data;
  } catch (error) {
    throw error;
  }
};

export { getCourses, createCourse, getCourse, updateCourse, removeCourse };


============================================================
FILE: requests/messages.js
============================================================
import apiClient from "@/lib/api-client";

const getMessages = async () => {
  try {
    const { data } = await apiClient.get("/message");
    return data;
  } catch (error) {
    throw error;
  }
};
const createMessage = async (payload) => {
  try {
    const { data } = await apiClient.post("/message", payload);
    return data;
  } catch (error) {
    throw error;
  }
};
const getMessage = async (id) => {
  try {
    const { data } = await apiClient.get(`/message/${id}`);
    return data;
  } catch (error) {
    throw error;
  }
};
const removeMessage = async (id) => {
  try {
    const { data } = await apiClient.delete(`/message/${id}`);
    return data;
  } catch (error) {
    throw error;
  }
};

export { getMessages, createMessage, getMessage, removeMessage };


============================================================
FILE: requests/projects.js
============================================================
import apiClient from "@/lib/api-client";

const getProjects = async () => {
  try {
    const { data } = await apiClient.get("/project");
    return data;
  } catch (error) {
    throw error;
  }
};
const createProject = async (payload) => {
  try {
    const { data } = await apiClient.post("/project", payload);
    return data;
  } catch (error) {
    throw error;
  }
};
const updateProject = async (id, payload) => {
  try {
    const { data } = await apiClient.patch(`/project/${id}`, payload);
    return data;
  } catch (error) {
    throw error;
  }
};
const getProject = async (id) => {
  try {
    const { data } = await apiClient.get(`/project/${id}`);
    return data;
  } catch (error) {
    throw error;
  }
};

const removeProject = async (id) => {
  try {
    const { data } = await apiClient.delete(`/project/${id}`);
    return data;
  } catch (error) {
    throw error;
  }
};

export { getProjects, createProject, getProject, updateProject, removeProject };


============================================================
FILE: requests/universities.js
============================================================
import apiClient from "@/lib/api-client";

const getUniversities = async () => {
  const { data } = await apiClient.get("/education/university");
  return data;
};
const createUniversity = async (payload) => {
  try {
    const { data } = await apiClient.post("/education/university", payload);
    return data;
  } catch (error) {
    throw error;
  }
};
const getUniversity = async (id) => {
  try {
    const { data } = await apiClient.get(`/education/university/${id}`);
    return data;
  } catch (error) {
    throw error;
  }
};
const updateUniversity = async (id, payload) => {
  try {
    const { data } = await apiClient.patch(
      `/education/university/${id}`,
      payload
    );
    return data;
  } catch (error) {
    throw error;
  }
};
const removeUniversity = async (id) => {
  try {
    const { data } = await apiClient.delete(`/education/university/${id}`);
    return data;
  } catch (error) {
    throw error;
  }
};
export {
  getUniversities,
  createUniversity,
  getUniversity,
  updateUniversity,
  removeUniversity,
};


============================================================
FILE: requests/users.js
============================================================
import { authClient } from "@/lib/auth-client";

const getUsers = async (search = "") => {
  const { data, error } = await authClient.admin.listUsers({
    query: {
      limit: 100,
      offset: 0,
      searchValue: search,
      searchField: "email",
      searchOperator: "starts_with",
    },
  });
  if (error) throw new Error(error.message || "Failed to fetch users");
  return data?.users || [];
};

const createUser = async (payload) => {
  const { data, error } = await authClient.admin.createUser(payload);
  if (error) throw new Error(error.message || "Failed to create user");
  return data;
};

const updateUserRole = async (payload) => {
  const { data, error } = await authClient.admin.setRole(payload);
  if (error) throw new Error(error.message || "Failed to update role");
  return data;
};

const banUser = async (payload) => {
  const { data, error } = await authClient.admin.banUser(payload);
  if (error) throw new Error(error.message || "Failed to ban user");
  return data;
};

const unbanUser = async (userId) => {
  const { data, error } = await authClient.admin.unbanUser({ userId });
  if (error) throw new Error(error.message || "Failed to unban user");
  return data;
};

const removeUser = async (userId) => {
  const { data, error } = await authClient.admin.removeUser({ userId });
  if (error) throw new Error(error.message || "Failed to remove user");
  return data;
};

export { getUsers, createUser, updateUserRole, banUser, unbanUser, removeUser };


============================================================
FILE: utils/formatDate.js
============================================================
export const formatDate = (dateString, extended = false) => {
  const date = new Date(dateString);
  return `${date.toLocaleString("en-US", {
    month: "long",
    day: "numeric",
    year: "numeric",
  })} ${
    extended
      ? `at ${date.toLocaleString("en-US", {
          hour: "2-digit",
          minute: "2-digit",
          hour12: true,
        })}`
      : ""
  }`;
};


============================================================
FILE: checking.txt
============================================================
const router = useRouter();
  const { data: session, isPending } = authClient.useSession();
  const queryClient = useQueryClient();

  useEffect(() => {
    if (!isPending) {
      if (!session) {
        toast.warning("Your session is expired!");
        router.push("/signin");
      } else if (session?.user?.role !== "admin") {
        toast.warning("You're not authorized to access this route!");
        router.push("/dashboard");
      }
    }
  }, [session, isPending, router]);
if (isPending)
    return (
      <div className="text-center text-gray-600 text-lg py-10">Loading...</div>
    );
  if (session?.user?.role !== "admin") return null;

============================================================
FILE: components.json
============================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": false,
  "tailwind": {
    "config": "",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "iconLibrary": "lucide",
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "registries": {}
}


============================================================
FILE: jsconfig.json
============================================================
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./*"]
    }
  }
}


============================================================
FILE: next.config.mjs
============================================================
const nextConfig = {
  images: {
    remotePatterns: [
      {
        protocol: "https",
        hostname: "placehold.co",
        port: "",
        pathname: "/**",
      },
    ],
  },
};

export default nextConfig;


============================================================
FILE: package.json
============================================================
{
  "name": "dashboard-client",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build --turbopack",
    "start": "next start"
  },
  "dependencies": {
    "@radix-ui/react-dialog": "^1.1.15",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-select": "^2.2.6",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-tabs": "^1.1.13",
    "@tanstack/react-query": "^5.90.2",
    "axios": "^1.12.2",
    "better-auth": "^1.3.27",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "formik": "^2.4.6",
    "lucide-react": "^0.548.0",
    "next": "15.5.4",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "sonner": "^2.0.7",
    "tailwind-merge": "^3.3.1",
    "yup": "^1.7.1"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4",
    "tailwindcss": "^4",
    "tw-animate-css": "^1.4.0"
  }
}


============================================================
FILE: postcss.config.mjs
============================================================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;